type token =
  | IDENT of (string * Cabs.cabsloc)
  | CST_CHAR of (int64 list * Cabs.cabsloc)
  | CST_WCHAR of (int64 list * Cabs.cabsloc)
  | CST_INT of (string * Cabs.cabsloc)
  | CST_FLOAT of (string * Cabs.cabsloc)
  | NAMED_TYPE of (string * Cabs.cabsloc)
  | CST_STRING of (int64 list * Cabs.cabsloc)
  | CST_WSTRING of (int64 list * Cabs.cabsloc)
  | EOF
  | CHAR of (Cabs.cabsloc)
  | INT of (Cabs.cabsloc)
  | DOUBLE of (Cabs.cabsloc)
  | FLOAT of (Cabs.cabsloc)
  | VOID of (Cabs.cabsloc)
  | INT64 of (Cabs.cabsloc)
  | INT32 of (Cabs.cabsloc)
  | ENUM of (Cabs.cabsloc)
  | STRUCT of (Cabs.cabsloc)
  | TYPEDEF of (Cabs.cabsloc)
  | UNION of (Cabs.cabsloc)
  | SIGNED of (Cabs.cabsloc)
  | UNSIGNED of (Cabs.cabsloc)
  | LONG of (Cabs.cabsloc)
  | SHORT of (Cabs.cabsloc)
  | VOLATILE of (Cabs.cabsloc)
  | EXTERN of (Cabs.cabsloc)
  | STATIC of (Cabs.cabsloc)
  | CONST of (Cabs.cabsloc)
  | RESTRICT of (Cabs.cabsloc)
  | AUTO of (Cabs.cabsloc)
  | REGISTER of (Cabs.cabsloc)
  | THREAD of (Cabs.cabsloc)
  | SIZEOF of (Cabs.cabsloc)
  | ALIGNOF of (Cabs.cabsloc)
  | EQ
  | PLUS_EQ
  | MINUS_EQ
  | STAR_EQ
  | SLASH_EQ
  | PERCENT_EQ
  | AND_EQ
  | PIPE_EQ
  | CIRC_EQ
  | INF_INF_EQ
  | SUP_SUP_EQ
  | ARROW
  | DOT
  | EQ_EQ
  | EXCLAM_EQ
  | INF
  | SUP
  | INF_EQ
  | SUP_EQ
  | PLUS of (Cabs.cabsloc)
  | MINUS of (Cabs.cabsloc)
  | STAR of (Cabs.cabsloc)
  | SLASH
  | PERCENT
  | TILDE of (Cabs.cabsloc)
  | AND of (Cabs.cabsloc)
  | PIPE
  | CIRC
  | EXCLAM of (Cabs.cabsloc)
  | AND_AND of (Cabs.cabsloc)
  | PIPE_PIPE
  | INF_INF
  | SUP_SUP
  | PLUS_PLUS of (Cabs.cabsloc)
  | MINUS_MINUS of (Cabs.cabsloc)
  | RPAREN
  | LPAREN of (Cabs.cabsloc)
  | RBRACE of (Cabs.cabsloc)
  | LBRACE of (Cabs.cabsloc)
  | LBRACKET
  | RBRACKET
  | COLON
  | SEMICOLON of (Cabs.cabsloc)
  | COMMA
  | ELLIPSIS
  | QUEST
  | BREAK of (Cabs.cabsloc)
  | CONTINUE of (Cabs.cabsloc)
  | GOTO of (Cabs.cabsloc)
  | RETURN of (Cabs.cabsloc)
  | SWITCH of (Cabs.cabsloc)
  | CASE of (Cabs.cabsloc)
  | DEFAULT of (Cabs.cabsloc)
  | WHILE of (Cabs.cabsloc)
  | DO of (Cabs.cabsloc)
  | FOR of (Cabs.cabsloc)
  | IF of (Cabs.cabsloc)
  | TRY of (Cabs.cabsloc)
  | EXCEPT of (Cabs.cabsloc)
  | FINALLY of (Cabs.cabsloc)
  | ELSE
  | ATTRIBUTE of (Cabs.cabsloc)
  | INLINE of (Cabs.cabsloc)
  | ASM of (Cabs.cabsloc)
  | TYPEOF of (Cabs.cabsloc)
  | FUNCTION__ of (Cabs.cabsloc)
  | PRETTY_FUNCTION__ of (Cabs.cabsloc)
  | LABEL__
  | BUILTIN_VA_ARG of (Cabs.cabsloc)
  | ATTRIBUTE_USED of (Cabs.cabsloc)
  | BUILTIN_VA_LIST
  | BLOCKATTRIBUTE
  | BUILTIN_TYPES_COMPAT of (Cabs.cabsloc)
  | BUILTIN_OFFSETOF of (Cabs.cabsloc)
  | DECLSPEC of (Cabs.cabsloc)
  | MSASM of (string * Cabs.cabsloc)
  | MSATTR of (string * Cabs.cabsloc)
  | PRAGMA_LINE of (string * Cabs.cabsloc)
  | PRAGMA of (Cabs.cabsloc)
  | PRAGMA_EOL
  | AT_TRANSFORM of (Cabs.cabsloc)
  | AT_TRANSFORMEXPR of (Cabs.cabsloc)
  | AT_SPECIFIER of (Cabs.cabsloc)
  | AT_EXPR of (Cabs.cabsloc)
  | AT_NAME
  | ANNOTATION of (string * Cabs.cabsloc)
  | PRECONDITION of (Cabs.cabsloc)
  | POSTCONDITION of (Cabs.cabsloc)
  | INVARIANT of (Cabs.cabsloc)
  | TINVARIANT of (Cabs.cabsloc)
  | MODIFIES of (Cabs.cabsloc)
  | ASSERT of (Cabs.cabsloc)
  | ASSUME of (Cabs.cabsloc)

open Parsing;;
let _ = parse_error;;
# 44 "src/frontc/cparser.mly"
open Cabs
open Cabshelper
module E = Errormsg

let parse_error msg : unit =       (* sm: c++-mode highlight hack: -> ' <- *)
  E.parse_error msg

let print = print_string

(* unit -> string option *)
(*
let getComments () =
  match !comments with
    [] -> None
  | _ -> 
      let r = Some(String.concat "\n" (List.rev !comments)) in
      comments := [];
      r
*)

let cabslu = {lineno = -10; 
	      filename = "cabs loc unknown"; 
	      byteno = -10;
              ident = 0;}

(* cabsloc -> cabsloc *)
(*
let handleLoc l =
  l.clcomment <- getComments();
  l
*)

(*
** Expression building
*)
let smooth_expression lst =
  match lst with
    [] -> NOTHING
  | [expr] -> expr
  | _ -> COMMA (lst)


let currentFunctionName = ref "<outside any function>"
    
let announceFunctionName ((n, decl, _, _):name) =
  !Lexerhack.add_identifier n;
  (* Start a context that includes the parameter names and the whole body. 
   * Will pop when we finish parsing the function body *)
  !Lexerhack.push_context ();
  (* Go through all the parameter names and mark them as identifiers *)
  let rec findProto = function
      PROTO (d, args, _, _) when isJUSTBASE d -> 
        List.iter (fun (_, (an, _, _, _)) -> !Lexerhack.add_identifier an) args

    | PROTO (d, _, _, _) -> findProto d
    | PARENTYPE (_, d, _) -> findProto d
    | PTR (_, d) -> findProto d
    | ARRAY (d, _, _) -> findProto d
    | _ -> parse_error "Cannot find the prototype in a function definition";
           raise Parsing.Parse_error 

  and isJUSTBASE = function
      JUSTBASE -> true
    | PARENTYPE (_, d, _) -> isJUSTBASE d
    | _ -> false
  in
  findProto decl;
  currentFunctionName := n



let applyPointer (ptspecs: attribute list list) (dt: decl_type)  
       : decl_type = 
  (* Outer specification first *)
  let rec loop = function
      [] -> dt
    | attrs :: rest -> PTR(attrs, loop rest)
  in
  loop ptspecs

let doDeclaration (loc: cabsloc) (specs: spec_elem list) (nl: init_name list) : definition = 
  if isTypedef specs then begin
    (* Tell the lexer about the new type names *)
    List.iter (fun ((n, _, _, _), _) -> !Lexerhack.add_type n) nl;
    TYPEDEF ((specs, List.map (fun (n, _) -> n) nl), loc)
  end else
    if nl = [] then
      ONLYTYPEDEF (specs, loc)
    else begin
      (* Tell the lexer about the new variable names *)
      List.iter (fun ((n, _, _, _), _) -> !Lexerhack.add_identifier n) nl;
      DECDEF ((specs, nl), loc)  
    end


let doFunctionDef (loc: cabsloc)
                  (lend: cabsloc)
                  (specs: spec_elem list) 
                  (n: name) 
                  (b: block) : definition = 
  let fname = (specs, n) in
  let (_,def,_,_) = n in
  let rec findPP = function
    | PROTO (d, args, _, ps) when isJUSTBASE d -> ps
    | PROTO (d, _, _, _) -> findPP d
    | PARENTYPE (_, d, _) -> findPP d
    | PTR (_,d) -> findPP d
    | ARRAY (d,_,_) -> findPP d
    | _ -> parse_error "Cannot find pre- and post-conditions";
	   raise Parsing.Parse_error

  and isJUSTBASE = function
      JUSTBASE -> true
    | PARENTYPE (_, d, _) -> isJUSTBASE d
    | _ -> false
  in 
  FUNDEF (fname, b, findPP def , loc, lend)

let doOldParDecl (names: string list)
                 ((pardefs: name_group list), (isva: bool)) 
    : single_name list * bool =
  let findOneName n =
    (* Search in pardefs for the definition for this parameter *)
    let rec loopGroups = function
        [] -> ([SpecType Tint], (n, JUSTBASE, [], cabslu))
      | (specs, names) :: restgroups ->
          let rec loopNames = function
              [] -> loopGroups restgroups
            | ((n',_, _, _) as sn) :: _ when n' = n -> (specs, sn)
            | _ :: restnames -> loopNames restnames
          in
          loopNames names
    in
    loopGroups pardefs
  in
  let args = List.map findOneName names in
  (args, isva)

let checkConnective (s : string) : unit =
begin
  (* checking this means I could possibly have more connectives, with *)
  (* different meaning *)
  if (s <> "to") then (
    parse_error "transformer connective must be 'to'";
    raise Parsing.Parse_error
  )
  else ()
end

let int64_to_char value =
  if (compare value (Int64.of_int 255) > 0) || (compare value Int64.zero < 0) then
    begin
      let msg = Printf.sprintf "cparser:intlist_to_string: character 0x%Lx too big" value in
      parse_error msg;
      raise Parsing.Parse_error
    end
  else
    Char.chr (Int64.to_int value)

(* takes a not-nul-terminated list, and converts it to a string. *)
let rec intlist_to_string (str: int64 list):string =
  match str with
    [] -> ""  (* add nul-termination *)
  | value::rest ->
      let this_char = int64_to_char value in
      (String.make 1 this_char) ^ (intlist_to_string rest)

let fst3 (result, _, _) = result
let snd3 (_, result, _) = result
let trd3 (_, _, result) = result


(*
   transform:  __builtin_offsetof(type, member)
   into     :  (size_t) (&(type * ) 0)->member
 *)

let transformOffsetOf (speclist, dtype) member =
  let rec addPointer = function
    | JUSTBASE ->
	PTR([], JUSTBASE)
    | PARENTYPE (attrs1, dtype, attrs2) ->
	PARENTYPE (attrs1, addPointer dtype, attrs2)
    | ARRAY (dtype, attrs, expr) ->
	ARRAY (addPointer dtype, attrs, expr)
    | PTR (attrs, dtype) ->
	PTR (attrs, addPointer dtype)
    | PROTO (dtype, names, variadic, ps) ->
	PROTO (addPointer dtype, names, variadic, ps)
  in
  let nullType = (speclist, addPointer dtype) in
  let nullExpr = CONSTANT (CONST_INT "0") in
  let castExpr = CAST (nullType, SINGLE_INIT nullExpr) in

  let rec replaceBase = function
    | VARIABLE field ->
	MEMBEROFPTR (castExpr, field)
    | MEMBEROF (base, field) ->
	MEMBEROF (replaceBase base, field)
    | INDEX (base, index) ->
	INDEX (replaceBase base, index)
    | _ ->
	parse_error "malformed offset expression in __builtin_offsetof";
        raise Parsing.Parse_error 
  in
  let memberExpr = replaceBase member in
  let addrExpr = UNARY (ADDROF, memberExpr) in
  (* slight cheat: hard-coded assumption that size_t == unsigned int *)
  let sizeofType = [SpecType Tunsigned], JUSTBASE in
  let resultExpr = CAST (sizeofType, SINGLE_INIT addrExpr) in
  resultExpr

# 346 "src/frontc/cparser.ml"
let yytransl_const = [|
    0 (* EOF *);
  290 (* EQ *);
  291 (* PLUS_EQ *);
  292 (* MINUS_EQ *);
  293 (* STAR_EQ *);
  294 (* SLASH_EQ *);
  295 (* PERCENT_EQ *);
  296 (* AND_EQ *);
  297 (* PIPE_EQ *);
  298 (* CIRC_EQ *);
  299 (* INF_INF_EQ *);
  300 (* SUP_SUP_EQ *);
  301 (* ARROW *);
  302 (* DOT *);
  303 (* EQ_EQ *);
  304 (* EXCLAM_EQ *);
  305 (* INF *);
  306 (* SUP *);
  307 (* INF_EQ *);
  308 (* SUP_EQ *);
  312 (* SLASH *);
  313 (* PERCENT *);
  316 (* PIPE *);
  317 (* CIRC *);
  320 (* PIPE_PIPE *);
  321 (* INF_INF *);
  322 (* SUP_SUP *);
  325 (* RPAREN *);
  329 (* LBRACKET *);
  330 (* RBRACKET *);
  331 (* COLON *);
  333 (* COMMA *);
  334 (* ELLIPSIS *);
  335 (* QUEST *);
  350 (* ELSE *);
  357 (* LABEL__ *);
  360 (* BUILTIN_VA_LIST *);
  361 (* BLOCKATTRIBUTE *);
  369 (* PRAGMA_EOL *);
  374 (* AT_NAME *);
    0|]

let yytransl_block = [|
  257 (* IDENT *);
  258 (* CST_CHAR *);
  259 (* CST_WCHAR *);
  260 (* CST_INT *);
  261 (* CST_FLOAT *);
  262 (* NAMED_TYPE *);
  263 (* CST_STRING *);
  264 (* CST_WSTRING *);
  265 (* CHAR *);
  266 (* INT *);
  267 (* DOUBLE *);
  268 (* FLOAT *);
  269 (* VOID *);
  270 (* INT64 *);
  271 (* INT32 *);
  272 (* ENUM *);
  273 (* STRUCT *);
  274 (* TYPEDEF *);
  275 (* UNION *);
  276 (* SIGNED *);
  277 (* UNSIGNED *);
  278 (* LONG *);
  279 (* SHORT *);
  280 (* VOLATILE *);
  281 (* EXTERN *);
  282 (* STATIC *);
  283 (* CONST *);
  284 (* RESTRICT *);
  285 (* AUTO *);
  286 (* REGISTER *);
  287 (* THREAD *);
  288 (* SIZEOF *);
  289 (* ALIGNOF *);
  309 (* PLUS *);
  310 (* MINUS *);
  311 (* STAR *);
  314 (* TILDE *);
  315 (* AND *);
  318 (* EXCLAM *);
  319 (* AND_AND *);
  323 (* PLUS_PLUS *);
  324 (* MINUS_MINUS *);
  326 (* LPAREN *);
  327 (* RBRACE *);
  328 (* LBRACE *);
  332 (* SEMICOLON *);
  336 (* BREAK *);
  337 (* CONTINUE *);
  338 (* GOTO *);
  339 (* RETURN *);
  340 (* SWITCH *);
  341 (* CASE *);
  342 (* DEFAULT *);
  343 (* WHILE *);
  344 (* DO *);
  345 (* FOR *);
  346 (* IF *);
  347 (* TRY *);
  348 (* EXCEPT *);
  349 (* FINALLY *);
  351 (* ATTRIBUTE *);
  352 (* INLINE *);
  353 (* ASM *);
  354 (* TYPEOF *);
  355 (* FUNCTION__ *);
  356 (* PRETTY_FUNCTION__ *);
  358 (* BUILTIN_VA_ARG *);
  359 (* ATTRIBUTE_USED *);
  362 (* BUILTIN_TYPES_COMPAT *);
  363 (* BUILTIN_OFFSETOF *);
  364 (* DECLSPEC *);
  365 (* MSASM *);
  366 (* MSATTR *);
  367 (* PRAGMA_LINE *);
  368 (* PRAGMA *);
  370 (* AT_TRANSFORM *);
  371 (* AT_TRANSFORMEXPR *);
  372 (* AT_SPECIFIER *);
  373 (* AT_EXPR *);
  375 (* ANNOTATION *);
  376 (* PRECONDITION *);
  377 (* POSTCONDITION *);
  378 (* INVARIANT *);
  379 (* TINVARIANT *);
  380 (* MODIFIES *);
  381 (* ASSERT *);
  382 (* ASSUME *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\003\000\003\000\003\000\051\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\056\000\056\000\056\000\057\000\057\000\058\000\058\000\
\058\000\058\000\058\000\059\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\060\000\060\000\
\060\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\063\000\
\063\000\064\000\064\000\064\000\064\000\065\000\065\000\065\000\
\066\000\066\000\066\000\067\000\067\000\067\000\067\000\067\000\
\068\000\068\000\068\000\069\000\069\000\070\000\070\000\071\000\
\071\000\072\000\072\000\073\000\073\000\074\000\074\000\075\000\
\075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\011\000\009\000\009\000\009\000\009\000\
\009\000\009\000\010\000\076\000\018\000\018\000\019\000\019\000\
\019\000\077\000\077\000\077\000\013\000\013\000\021\000\021\000\
\061\000\061\000\020\000\020\000\020\000\078\000\078\000\022\000\
\022\000\022\000\023\000\023\000\079\000\016\000\016\000\012\000\
\012\000\014\000\014\000\014\000\080\000\080\000\015\000\015\000\
\017\000\017\000\035\000\035\000\081\000\082\000\082\000\036\000\
\036\000\036\000\036\000\036\000\037\000\037\000\038\000\038\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\084\000\084\000\031\000\031\000\041\000\
\041\000\040\000\040\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\088\000\088\000\089\000\
\089\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\026\000\026\000\
\026\000\026\000\026\000\026\000\044\000\044\000\043\000\043\000\
\043\000\030\000\030\000\030\000\029\000\029\000\042\000\045\000\
\045\000\045\000\045\000\045\000\092\000\093\000\093\000\094\000\
\094\000\094\000\028\000\028\000\028\000\028\000\027\000\095\000\
\095\000\039\000\039\000\054\000\054\000\054\000\096\000\096\000\
\096\000\049\000\050\000\050\000\034\000\034\000\048\000\048\000\
\046\000\046\000\046\000\046\000\047\000\047\000\032\000\033\000\
\033\000\033\000\033\000\033\000\055\000\055\000\097\000\097\000\
\098\000\098\000\098\000\098\000\052\000\052\000\052\000\005\000\
\005\000\006\000\006\000\006\000\090\000\090\000\090\000\090\000\
\090\000\085\000\085\000\099\000\099\000\099\000\099\000\101\000\
\101\000\091\000\091\000\053\000\053\000\053\000\103\000\103\000\
\103\000\103\000\103\000\103\000\103\000\103\000\103\000\103\000\
\103\000\104\000\104\000\104\000\104\000\104\000\104\000\105\000\
\105\000\105\000\105\000\105\000\105\000\105\000\105\000\105\000\
\105\000\105\000\106\000\107\000\107\000\107\000\107\000\108\000\
\108\000\108\000\109\000\109\000\109\000\110\000\110\000\110\000\
\110\000\110\000\111\000\111\000\111\000\112\000\112\000\113\000\
\113\000\114\000\114\000\115\000\115\000\116\000\116\000\117\000\
\117\000\102\000\118\000\118\000\118\000\119\000\119\000\083\000\
\083\000\100\000\100\000\120\000\120\000\007\000\007\000\007\000\
\086\000\086\000\087\000\087\000\121\000\121\000\123\000\123\000\
\124\000\124\000\122\000\122\000\125\000\125\000\126\000\126\000\
\127\000\127\000\000\000\000\000"

let yylen = "\002\000\
\002\000\001\000\000\000\002\000\002\000\000\000\001\000\001\000\
\003\000\005\000\005\000\001\000\007\000\005\000\008\000\008\000\
\003\000\001\000\001\000\004\000\000\000\001\000\001\000\001\000\
\001\000\003\000\004\000\001\000\002\000\004\000\006\000\006\000\
\006\000\003\000\003\000\002\000\002\000\006\000\001\000\003\000\
\002\000\001\000\002\000\002\000\002\000\004\000\002\000\004\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\004\000\001\000\003\000\003\000\003\000\001\000\003\000\003\000\
\001\000\003\000\003\000\001\000\003\000\003\000\003\000\003\000\
\001\000\003\000\003\000\001\000\003\000\001\000\003\000\001\000\
\003\000\001\000\003\000\001\000\003\000\001\000\005\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\002\000\001\000\002\000\
\002\000\001\000\001\000\001\000\001\000\003\000\001\000\003\000\
\000\000\001\000\003\000\002\000\001\000\001\000\000\000\003\000\
\004\000\005\000\000\000\001\000\002\000\000\000\001\000\000\000\
\001\000\001\000\003\000\003\000\000\000\001\000\003\000\003\000\
\003\000\003\000\005\000\003\000\001\000\000\000\002\000\000\000\
\002\000\002\000\002\000\002\000\000\000\004\000\001\000\003\000\
\001\000\002\000\001\000\003\000\005\000\003\000\003\000\005\000\
\008\000\004\000\004\000\006\000\002\000\002\000\003\000\002\000\
\002\000\003\000\004\000\007\000\001\000\005\000\004\000\007\000\
\007\000\007\000\003\000\002\000\001\000\003\000\002\000\001\000\
\003\000\001\000\003\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\004\000\000\000\001\000\000\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000\003\000\006\000\005\000\007\000\
\006\000\002\000\006\000\005\000\007\000\006\000\002\000\006\000\
\005\000\007\000\006\000\001\000\004\000\004\000\000\000\003\000\
\002\000\004\000\002\000\003\000\001\000\003\000\001\000\004\000\
\002\000\001\000\003\000\003\000\001\000\003\000\003\000\001\000\
\004\000\005\000\005\000\005\000\001\000\000\000\002\000\000\000\
\002\000\003\000\002\000\002\000\001\000\003\000\002\000\006\000\
\004\000\001\000\003\000\000\000\004\000\004\000\001\000\003\000\
\001\000\003\000\000\000\001\000\002\000\001\000\003\000\001\000\
\004\000\003\000\004\000\004\000\001\000\000\000\002\000\002\000\
\002\000\005\000\006\000\004\000\000\000\001\000\001\000\002\000\
\006\000\006\000\006\000\006\000\001\000\001\000\001\000\000\000\
\002\000\000\000\002\000\005\000\004\000\002\000\001\000\001\000\
\001\000\000\000\002\000\001\000\001\000\001\000\001\000\004\000\
\002\000\001\000\002\000\003\000\004\000\001\000\001\000\001\000\
\003\000\002\000\001\000\001\000\001\000\003\000\003\000\003\000\
\001\000\001\000\003\000\002\000\003\000\003\000\004\000\001\000\
\002\000\004\000\002\000\004\000\002\000\002\000\002\000\002\000\
\002\000\002\000\001\000\001\000\003\000\003\000\003\000\001\000\
\003\000\003\000\001\000\003\000\003\000\001\000\003\000\003\000\
\003\000\003\000\001\000\003\000\003\000\001\000\003\000\001\000\
\003\000\001\000\003\000\001\000\003\000\001\000\003\000\001\000\
\005\000\001\000\001\000\003\000\003\000\000\000\001\000\003\000\
\003\000\003\000\003\000\000\000\001\000\000\000\002\000\002\000\
\001\000\002\000\000\000\003\000\000\000\001\000\001\000\003\000\
\005\000\005\000\000\000\003\000\000\000\003\000\000\000\002\000\
\001\000\003\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\236\000\211\000\213\000\217\000\
\216\000\210\000\215\000\000\000\000\000\000\000\000\000\218\000\
\219\000\214\000\212\000\054\001\000\000\000\000\053\001\055\001\
\000\000\000\000\064\001\000\000\000\000\000\000\000\000\000\000\
\000\000\063\001\078\001\000\000\000\000\000\000\000\000\065\001\
\171\001\000\000\002\000\000\000\000\000\000\000\007\000\008\000\
\000\000\000\000\000\000\012\000\000\000\172\001\000\000\000\000\
\018\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\046\001\000\000\000\000\207\000\196\000\000\000\000\000\000\000\
\114\000\115\000\116\000\000\000\000\000\109\000\197\000\198\000\
\199\000\200\000\005\000\000\000\202\000\000\000\000\000\000\000\
\062\001\000\000\000\000\080\001\089\001\085\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\084\001\000\000\090\001\000\000\107\001\108\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\138\001\000\000\000\000\000\000\001\000\004\000\000\000\191\000\
\041\001\000\000\000\000\000\000\028\001\000\000\209\000\201\000\
\006\000\149\000\039\001\000\000\000\000\203\000\204\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\250\000\
\000\000\000\000\073\001\000\000\000\000\000\000\000\000\075\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\048\001\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
\110\000\000\000\000\000\000\000\023\000\103\000\104\000\101\000\
\102\000\111\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\000\105\000\000\000\025\000\000\000\000\000\
\000\000\028\000\000\000\056\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\088\000\
\100\000\000\000\000\000\000\000\082\001\000\000\000\000\092\001\
\000\000\000\000\097\001\000\000\099\001\101\001\102\001\103\001\
\106\001\104\001\105\001\000\000\000\000\000\000\076\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\071\001\069\001\070\001\000\000\068\001\000\000\000\000\190\000\
\000\000\000\000\000\000\000\001\015\001\000\000\000\000\000\000\
\017\000\000\000\000\000\000\000\000\000\011\001\012\001\000\000\
\000\000\000\000\007\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\143\001\000\000\061\001\000\000\000\000\045\000\000\000\047\000\
\049\000\050\000\051\000\054\000\052\000\053\000\055\000\000\000\
\043\000\044\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\237\000\113\000\112\000\029\001\000\000\
\238\000\000\000\000\000\036\000\037\000\000\000\000\000\029\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\145\001\000\000\
\000\000\144\001\091\001\086\001\087\001\000\000\000\000\081\001\
\088\001\077\001\093\001\094\001\000\000\109\001\110\001\111\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\205\000\026\001\057\001\193\000\000\000\117\000\
\195\000\000\000\000\000\000\000\000\000\255\000\000\000\000\000\
\148\000\000\000\000\000\000\000\000\000\019\001\014\000\000\000\
\000\000\014\001\000\000\000\000\000\000\000\000\009\001\000\000\
\042\001\254\000\252\000\251\000\233\000\072\001\020\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\241\000\
\000\000\000\000\000\000\000\000\000\000\223\000\243\000\000\000\
\000\000\000\000\228\000\000\000\000\000\000\000\010\000\147\001\
\146\001\011\000\000\000\000\000\000\000\144\000\000\000\000\000\
\143\000\000\000\026\000\000\000\000\000\000\000\000\000\000\000\
\035\000\034\000\000\000\135\000\000\000\000\000\000\000\089\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\059\000\060\000\061\000\058\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\137\000\000\000\
\141\001\140\001\000\000\000\000\095\001\000\000\000\000\000\000\
\000\000\000\000\000\000\125\000\000\000\122\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\059\001\000\000\000\000\151\000\000\000\000\000\161\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\181\000\000\000\000\000\000\000\
\000\000\000\000\000\000\163\000\000\000\000\000\025\001\000\000\
\000\000\000\000\000\000\000\000\005\001\031\001\000\000\000\000\
\010\001\232\000\235\000\000\000\000\000\000\000\000\000\000\000\
\244\000\249\000\240\000\000\000\000\000\000\000\222\000\225\000\
\000\000\227\000\230\000\000\000\000\000\000\000\000\000\140\000\
\139\000\000\000\057\000\000\000\000\000\000\000\027\000\000\000\
\030\000\146\000\145\000\000\000\137\001\000\000\000\000\000\000\
\000\000\000\000\126\000\000\000\133\000\118\000\124\000\001\001\
\017\001\000\000\000\000\142\000\000\000\000\000\000\000\160\000\
\158\000\000\000\000\000\176\000\177\000\000\000\000\000\174\000\
\000\000\000\000\000\000\000\000\173\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\154\000\162\000\153\000\147\000\156\000\000\000\000\000\
\013\000\034\001\000\000\000\000\000\000\234\000\049\001\050\001\
\052\001\051\001\000\000\246\000\242\000\224\000\229\000\000\000\
\000\000\000\000\039\000\000\000\087\000\000\000\000\000\132\000\
\128\000\000\000\000\000\120\000\123\000\000\000\003\001\002\001\
\000\000\004\001\187\000\000\000\000\000\178\000\000\000\175\000\
\000\000\166\000\000\000\000\000\167\000\000\000\000\000\000\000\
\189\000\000\000\000\000\000\000\000\000\151\001\152\001\000\000\
\000\000\000\000\000\000\024\001\021\001\022\001\033\001\036\001\
\035\001\248\000\038\000\031\000\032\000\000\000\033\000\041\000\
\015\000\016\000\129\000\000\000\016\001\060\001\170\000\067\001\
\179\000\171\000\000\000\000\000\188\000\000\000\000\000\000\000\
\183\000\108\000\000\000\000\000\000\000\000\000\000\000\040\000\
\130\000\000\000\168\000\000\000\165\000\182\000\154\001\000\000\
\000\000\000\000\000\000\000\000\172\000\000\000\000\000\000\000\
\000\000\159\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\156\001\000\000\000\000\180\000\186\000\184\000\
\185\000\169\000\166\001\000\000\160\001\000\000\000\000\164\001\
\000\000\000\000\000\000\168\001\162\001\161\001\000\000\170\001"

let yydgoto = "\003\000\
\041\000\042\000\043\000\044\000\028\001\198\001\190\002\097\002\
\211\000\212\000\100\001\046\002\060\002\098\002\214\000\013\002\
\120\001\085\000\215\000\061\002\062\002\063\002\225\002\067\001\
\046\000\068\001\137\000\157\000\160\000\161\000\047\000\048\000\
\049\000\217\000\100\002\101\002\040\001\203\001\154\000\138\000\
\139\000\078\001\236\001\237\001\212\001\213\001\214\001\203\002\
\141\000\079\001\050\000\051\000\069\001\209\001\070\000\036\001\
\055\001\218\000\219\000\220\002\065\002\220\000\221\000\222\000\
\223\000\224\000\225\000\226\000\227\000\228\000\229\000\230\000\
\231\000\232\000\233\000\035\003\086\000\156\002\066\002\165\002\
\148\000\205\001\097\000\250\002\236\002\036\003\049\003\087\000\
\144\000\053\000\064\000\199\001\158\000\051\001\037\001\105\002\
\073\000\074\000\030\001\187\000\065\000\235\000\115\000\116\000\
\117\000\118\000\119\000\120\000\121\000\122\000\123\000\124\000\
\125\000\126\000\127\000\128\000\129\000\236\000\082\001\000\000\
\056\003\067\003\057\003\058\003\059\003\080\003\084\003"

let yysindex = "\240\001\
\014\009\014\009\000\000\034\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\000\032\255\045\016\032\255\000\000\
\000\000\000\000\000\000\000\000\223\014\045\016\000\000\000\000\
\045\016\045\016\000\000\014\009\071\255\045\016\092\255\132\255\
\165\255\000\000\000\000\062\017\241\255\254\255\022\000\000\000\
\000\000\129\001\000\000\014\009\004\255\070\016\000\000\000\000\
\082\255\164\000\045\016\000\000\045\016\000\000\176\000\135\015\
\000\000\000\000\185\000\118\000\165\255\153\000\177\000\087\000\
\003\255\166\000\182\000\189\000\200\000\212\000\202\000\058\000\
\000\000\202\000\045\016\000\000\000\000\216\000\202\000\058\000\
\000\000\000\000\000\000\162\015\088\255\000\000\000\000\000\000\
\000\000\000\000\000\000\232\000\000\000\088\255\207\008\169\016\
\000\000\067\255\188\000\000\000\000\000\000\000\015\013\086\013\
\062\017\062\017\062\017\062\017\062\017\062\017\062\017\237\000\
\000\000\251\254\000\000\048\255\000\000\000\000\146\000\108\000\
\207\000\038\002\209\000\245\000\007\001\011\001\014\001\225\255\
\000\000\075\009\105\013\078\001\000\000\000\000\168\001\000\000\
\000\000\008\001\038\001\061\001\000\000\097\000\000\000\000\000\
\000\000\000\000\000\000\242\000\040\001\000\000\000\000\042\001\
\202\000\037\001\135\015\070\001\065\001\062\001\125\001\000\000\
\086\001\232\000\000\000\178\001\185\000\185\000\110\001\000\000\
\185\001\192\001\199\001\207\001\088\008\141\001\146\001\202\000\
\000\000\088\008\153\001\154\001\202\000\014\009\004\255\000\000\
\000\000\234\016\165\001\170\001\000\000\000\000\000\000\000\000\
\000\000\000\000\176\013\247\013\105\013\105\013\105\013\105\013\
\105\013\105\013\253\001\010\014\010\014\180\005\171\001\177\001\
\186\001\190\001\000\000\000\000\198\001\000\000\044\001\070\001\
\206\001\000\000\244\001\000\000\219\002\155\000\229\000\225\000\
\079\002\250\000\212\001\216\001\201\001\218\001\239\255\000\000\
\000\000\242\255\209\001\214\001\000\000\150\016\025\002\000\000\
\028\002\180\005\000\000\180\005\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\222\001\032\002\187\001\000\000\091\255\
\091\255\062\017\062\017\062\017\062\017\062\017\062\017\062\017\
\062\017\062\017\062\017\062\017\062\017\062\017\062\017\062\017\
\062\017\062\017\062\017\062\017\062\017\228\001\233\001\229\001\
\000\000\000\000\000\000\070\001\000\000\168\001\070\001\000\000\
\055\012\168\001\197\007\000\000\000\000\234\001\049\002\204\001\
\000\000\176\000\237\001\045\016\247\001\000\000\000\000\000\000\
\224\000\250\014\000\000\202\000\105\013\054\001\249\001\255\001\
\037\002\086\001\086\001\185\000\048\002\055\002\056\002\057\002\
\050\002\088\008\130\255\065\002\088\008\088\008\088\008\068\002\
\066\002\088\008\088\008\069\002\071\002\061\001\097\000\032\000\
\000\000\078\002\000\000\072\002\180\005\000\000\180\005\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\180\005\
\000\000\000\000\064\000\074\002\083\002\086\002\087\002\105\013\
\045\016\045\016\156\002\000\000\000\000\000\000\000\000\090\002\
\000\000\091\255\091\255\000\000\000\000\192\010\007\011\000\000\
\105\013\105\013\105\013\105\013\105\013\105\013\105\013\105\013\
\105\013\105\013\105\013\105\013\105\013\105\013\105\013\105\013\
\105\013\105\013\105\013\105\013\105\013\105\013\105\013\105\013\
\105\013\105\013\105\013\105\013\105\013\192\010\000\000\253\016\
\253\016\000\000\000\000\000\000\000\000\096\002\099\002\000\000\
\000\000\000\000\000\000\000\000\095\002\000\000\000\000\000\000\
\146\000\146\000\108\000\108\000\207\000\207\000\207\000\207\000\
\038\002\038\002\209\000\245\000\007\001\011\001\014\001\108\002\
\169\002\183\002\000\000\000\000\000\000\000\000\219\009\000\000\
\000\000\070\001\176\000\168\001\115\002\000\000\135\015\200\001\
\000\000\117\002\116\002\165\255\216\003\000\000\000\000\028\255\
\202\000\000\000\156\000\050\008\094\006\131\002\000\000\065\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\134\002\
\135\002\086\001\088\255\088\255\088\255\088\255\088\008\000\000\
\105\013\088\008\136\002\132\002\138\002\000\000\000\000\141\002\
\144\002\088\008\000\000\162\002\181\002\088\008\000\000\000\000\
\000\000\000\000\199\002\200\002\201\002\000\000\192\010\192\010\
\000\000\127\012\000\000\197\002\198\002\202\002\209\002\156\000\
\000\000\000\000\205\002\000\000\214\002\242\254\210\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\155\000\155\000\
\229\000\229\000\225\000\225\000\225\000\225\000\079\002\079\002\
\250\000\212\001\216\001\201\001\218\001\212\002\000\000\215\002\
\000\000\000\000\221\002\221\002\000\000\062\017\223\002\224\002\
\000\000\091\255\105\013\000\000\220\002\000\000\001\003\235\002\
\240\002\055\012\243\002\202\000\250\002\026\011\088\255\252\002\
\000\000\049\002\242\000\000\000\205\002\247\002\000\000\255\002\
\000\003\102\255\039\010\253\002\105\013\005\003\253\002\198\004\
\007\003\253\002\082\255\189\255\000\000\012\003\013\003\016\003\
\216\003\028\003\216\003\000\000\067\003\216\003\000\000\062\003\
\064\003\065\003\076\003\070\001\000\000\000\000\135\015\192\010\
\000\000\000\000\000\000\075\003\080\003\081\003\084\003\085\003\
\000\000\000\000\000\000\105\013\084\255\088\008\000\000\000\000\
\087\003\000\000\000\000\091\003\221\002\221\002\221\002\000\000\
\000\000\219\009\000\000\045\016\045\016\091\255\000\000\070\001\
\000\000\000\000\000\000\105\013\000\000\014\009\105\013\121\255\
\159\000\219\009\000\000\055\012\000\000\000\000\000\000\000\000\
\000\000\045\016\039\000\000\000\090\003\086\003\202\000\000\000\
\000\000\252\255\113\255\000\000\000\000\092\003\192\010\000\000\
\105\003\097\011\198\004\068\000\000\000\198\004\088\003\079\003\
\044\006\198\004\254\000\189\255\189\255\097\003\181\003\182\003\
\189\003\000\000\000\000\000\000\000\000\000\000\028\255\190\015\
\000\000\000\000\123\003\125\003\119\003\000\000\000\000\000\000\
\000\000\000\000\168\001\000\000\000\000\000\000\000\000\131\003\
\134\003\135\003\000\000\050\000\000\000\136\003\138\003\000\000\
\000\000\121\255\105\013\000\000\000\000\202\000\000\000\000\000\
\168\001\000\000\000\000\198\004\113\255\000\000\137\003\000\000\
\064\000\000\000\198\004\105\013\000\000\113\255\253\002\155\003\
\000\000\192\010\116\003\253\002\082\255\000\000\000\000\205\003\
\173\003\174\003\175\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\252\003\000\000\000\000\
\000\000\000\000\000\000\180\003\000\000\000\000\000\000\000\000\
\000\000\000\000\183\003\179\003\000\000\184\003\198\004\082\255\
\000\000\000\000\205\003\186\003\088\255\088\255\088\255\000\000\
\000\000\198\004\000\000\192\010\000\000\000\000\000\000\190\003\
\187\003\188\003\193\003\195\003\000\000\196\003\002\004\191\003\
\199\003\000\000\088\255\192\003\197\003\201\003\204\003\198\004\
\198\003\190\003\000\000\190\003\211\003\000\000\000\000\000\000\
\000\000\000\000\000\000\207\003\000\000\168\011\205\003\000\000\
\218\003\220\003\208\003\000\000\000\000\000\000\205\003\000\000"

let yyrindex = "\000\000\
\017\000\025\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\219\003\189\001\219\003\000\000\
\000\000\000\000\000\000\000\000\191\000\189\001\000\000\000\000\
\189\001\189\001\000\000\014\000\000\000\189\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\014\000\247\000\023\001\000\000\000\000\
\000\000\000\000\189\001\000\000\189\001\000\000\024\015\221\003\
\000\000\000\000\000\000\000\000\000\000\000\000\233\007\000\000\
\048\000\000\000\000\000\000\000\000\000\000\000\156\006\219\003\
\000\000\121\000\189\001\000\000\000\000\000\000\011\007\219\003\
\000\000\000\000\000\000\000\000\112\014\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\004\254\006\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\109\007\000\000\000\000\002\024\103\024\
\206\024\160\004\131\006\205\007\007\014\101\001\014\006\053\001\
\000\000\011\004\000\000\000\000\000\000\000\000\045\000\000\000\
\000\000\217\003\000\000\035\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\091\002\000\000\000\000\000\000\225\003\
\050\255\000\000\000\000\067\000\226\003\000\000\201\255\000\000\
\237\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\238\003\000\000\000\000\122\007\
\000\000\238\003\000\000\000\000\219\003\057\255\247\000\000\000\
\000\000\241\003\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\129\017\076\001\
\000\000\000\000\216\017\000\000\207\018\024\019\235\019\174\020\
\235\021\150\022\008\023\093\023\178\023\174\001\145\005\000\000\
\000\000\000\000\248\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\226\000\000\000\142\009\247\000\000\000\
\000\000\055\000\243\000\000\000\000\000\000\000\000\000\218\002\
\000\000\000\000\101\255\110\255\000\000\000\000\000\000\003\001\
\246\003\000\000\000\000\119\255\000\000\249\003\000\000\000\000\
\000\000\237\003\237\003\000\000\000\000\000\000\000\000\000\000\
\000\000\238\003\247\000\000\000\238\003\238\003\238\003\000\000\
\000\000\238\003\238\003\000\000\000\000\026\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\250\003\227\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\246\003\
\000\000\000\000\000\000\000\000\000\000\004\004\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\255\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\035\024\070\024\138\024\171\024\239\024\018\025\051\025\086\025\
\015\005\109\025\041\007\142\014\054\015\182\005\145\006\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\007\004\000\000\
\000\000\247\000\024\015\116\010\000\000\000\000\221\003\140\001\
\000\000\005\004\000\000\000\000\009\004\000\000\000\000\247\000\
\050\255\000\000\075\255\006\000\061\000\000\000\000\000\226\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\237\003\000\000\000\000\000\000\000\000\238\003\000\000\
\000\000\238\003\036\001\008\004\000\000\000\000\000\000\000\000\
\000\000\238\003\000\000\000\000\000\000\238\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\209\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\097\019\170\019\
\044\020\109\020\239\020\048\021\113\021\178\021\036\022\093\022\
\207\022\036\023\121\023\206\023\058\010\000\000\000\000\000\000\
\000\000\000\000\077\008\058\016\000\000\000\000\000\000\000\000\
\189\025\000\000\000\000\000\000\012\004\000\000\199\012\000\000\
\000\000\000\000\000\000\119\255\000\000\001\004\000\000\000\000\
\000\000\000\000\091\002\000\000\148\000\235\025\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\023\004\000\000\000\000\000\000\000\000\
\009\004\000\000\009\004\000\000\000\000\009\004\000\000\020\004\
\000\000\146\255\000\000\141\255\000\000\000\000\221\003\001\004\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\247\000\238\003\000\000\000\000\
\000\000\000\000\000\000\000\000\047\018\134\018\000\000\000\000\
\000\000\007\004\000\000\000\000\000\000\000\000\000\000\080\000\
\000\000\000\000\000\000\000\000\000\000\057\255\000\000\239\011\
\000\000\007\004\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\212\255\000\000\000\000\000\000\000\000\160\001\000\000\
\000\000\000\000\087\004\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\235\025\000\000\
\034\004\000\000\000\000\023\004\023\004\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\247\000\110\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\071\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\239\011\000\000\000\000\000\000\119\255\000\000\000\000\
\246\001\000\000\000\000\000\000\053\005\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\053\005\000\000\000\000\
\000\000\034\004\089\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\247\255\045\004\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\053\004\000\000\000\000\000\000\193\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\054\004\
\120\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\193\000\000\000\005\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\055\004\000\000\000\000\000\000\000\000\
\000\000\000\000\061\004\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\130\005\232\255\003\005\011\255\194\003\219\255\194\253\
\000\000\235\255\162\255\105\253\235\254\175\255\022\254\000\000\
\170\002\000\000\000\000\000\000\000\000\148\253\165\002\021\000\
\000\000\109\255\000\000\122\255\082\004\169\255\179\255\000\000\
\000\000\114\255\210\255\172\255\068\003\063\003\238\254\000\000\
\108\004\213\255\000\000\019\003\005\005\000\000\000\000\072\000\
\106\255\229\255\127\255\000\000\008\000\147\253\246\255\043\000\
\227\254\000\000\000\000\000\000\129\254\135\001\193\001\019\001\
\030\001\125\002\029\001\003\004\006\004\013\004\014\004\015\004\
\000\000\003\003\002\003\015\254\211\255\000\000\000\000\041\003\
\000\000\000\000\206\255\000\000\175\002\126\002\000\000\113\003\
\000\000\134\255\021\001\004\000\089\254\206\003\000\000\236\002\
\106\005\000\000\248\254\019\005\000\000\003\000\000\000\000\000\
\000\000\026\000\197\001\202\001\124\003\208\001\166\004\168\004\
\165\004\169\004\170\004\000\000\254\254\124\255\000\000\000\000\
\129\002\000\000\000\000\123\002\000\000\000\000\105\002"

let yytablesize = 6970
let yytable = "\084\000\
\213\000\140\000\147\000\091\000\078\000\048\001\184\000\056\000\
\052\000\052\000\163\000\193\001\029\001\003\000\113\000\038\001\
\003\000\142\000\184\001\134\000\045\001\045\000\045\000\206\001\
\003\000\184\002\200\001\103\002\224\001\225\001\073\001\072\002\
\057\000\248\002\076\000\052\000\023\001\058\000\114\000\185\000\
\189\001\076\000\076\000\224\002\194\001\076\000\076\000\240\000\
\045\000\045\001\076\000\052\000\230\002\081\001\063\000\071\000\
\006\000\079\000\135\000\146\002\174\000\175\000\255\001\102\001\
\045\000\048\001\143\000\237\000\179\000\180\000\254\000\076\000\
\188\000\076\000\113\000\056\001\156\000\058\001\059\001\136\000\
\056\001\145\000\135\000\113\000\113\000\113\000\113\000\113\000\
\113\000\113\000\006\003\057\000\000\001\001\001\081\000\076\000\
\058\000\060\000\030\003\158\001\044\001\159\001\174\002\055\000\
\183\000\179\002\167\000\255\000\182\002\020\001\061\000\186\002\
\046\001\252\000\176\000\216\000\242\002\224\002\045\001\245\002\
\002\001\045\001\181\000\251\002\101\001\045\001\060\000\003\000\
\049\001\056\001\246\000\247\000\248\000\249\000\250\000\251\000\
\238\000\052\000\135\000\061\000\092\000\027\001\043\001\027\000\
\056\001\043\001\027\001\056\001\054\003\062\000\045\000\066\000\
\067\000\146\000\068\000\069\000\175\002\077\001\233\001\103\001\
\101\001\094\000\101\001\029\001\113\000\072\001\058\002\029\001\
\029\001\110\001\076\001\216\001\044\001\023\003\232\001\156\000\
\069\002\239\001\240\001\241\001\026\003\020\001\244\001\245\001\
\135\000\020\001\082\000\083\000\112\001\052\000\045\001\200\001\
\056\001\059\002\192\001\103\001\116\002\103\001\251\001\204\002\
\252\001\095\000\045\000\200\001\233\001\234\001\070\002\029\000\
\062\000\253\001\027\001\020\001\188\002\027\001\218\001\189\002\
\113\000\043\001\005\002\006\002\033\000\108\002\034\000\110\002\
\045\003\038\001\216\000\047\001\226\001\020\001\020\001\040\000\
\020\001\020\001\096\000\053\003\113\000\113\000\113\000\113\000\
\113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
\113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
\188\001\074\003\027\001\101\001\165\001\101\001\216\000\056\001\
\216\000\004\002\216\002\165\001\028\003\006\000\101\001\253\000\
\006\000\032\003\144\002\049\002\050\002\253\000\056\001\235\001\
\006\000\056\001\228\002\020\001\166\001\167\001\168\001\111\001\
\020\001\072\000\040\001\080\000\012\002\015\002\103\001\058\001\
\103\001\217\001\163\001\164\001\159\002\056\001\149\001\021\001\
\074\001\103\001\056\001\149\002\057\000\074\001\151\001\056\001\
\130\000\058\000\057\000\153\001\056\001\150\001\152\001\058\000\
\208\001\153\001\201\001\027\001\047\002\131\000\156\000\235\002\
\027\001\029\001\058\001\020\001\020\001\029\001\020\001\020\001\
\058\001\058\001\058\001\121\002\003\000\168\000\123\002\057\000\
\029\001\029\001\029\001\132\000\058\000\083\003\129\002\014\003\
\192\001\057\000\132\002\056\001\248\001\083\003\058\000\165\001\
\165\001\216\000\040\001\216\000\152\001\056\001\194\000\194\000\
\231\002\056\001\056\001\255\001\216\000\056\001\015\003\074\001\
\047\001\056\001\119\001\059\000\056\001\216\000\216\000\099\002\
\133\000\056\001\113\000\113\000\254\001\037\001\229\002\013\001\
\027\001\056\001\122\002\027\001\255\001\029\001\243\002\013\001\
\047\001\244\002\060\000\047\001\047\001\027\001\067\002\047\001\
\027\001\076\002\047\001\107\002\009\002\010\002\166\000\061\000\
\006\001\007\001\056\001\149\000\104\002\074\001\034\001\074\001\
\074\001\062\000\074\001\074\001\056\001\136\002\137\002\062\000\
\152\000\066\000\067\000\025\001\068\000\069\000\026\001\027\001\
\027\001\159\000\027\000\162\000\158\001\047\001\047\001\206\000\
\047\001\047\001\158\001\047\001\047\001\047\001\106\002\165\001\
\003\001\004\001\005\001\170\002\062\000\117\002\118\002\119\002\
\120\002\132\001\133\001\134\001\102\002\048\001\062\000\047\001\
\111\002\047\001\006\000\156\000\153\002\010\003\164\000\006\000\
\057\000\183\000\027\001\192\001\047\001\058\000\047\001\027\001\
\226\002\064\002\213\002\169\000\227\002\243\000\245\000\047\001\
\001\000\002\000\058\001\022\003\164\002\206\000\180\002\027\001\
\165\000\048\001\029\000\170\000\027\001\217\002\218\002\014\001\
\015\001\177\002\171\000\028\001\206\000\157\001\241\000\033\000\
\028\001\034\000\206\000\157\001\194\002\172\000\196\002\008\001\
\009\001\198\002\040\000\099\002\058\001\099\002\208\000\208\000\
\099\002\135\001\136\001\173\000\208\000\211\002\164\002\178\000\
\113\000\137\001\138\001\165\001\165\001\211\001\027\001\027\001\
\143\001\144\001\027\001\192\001\187\002\186\000\027\001\016\001\
\237\002\166\002\081\000\109\001\206\000\219\001\159\000\253\000\
\223\002\161\002\058\001\192\001\027\001\192\001\058\001\058\001\
\067\002\066\000\067\000\017\001\068\000\069\000\018\001\032\001\
\028\001\086\001\088\001\028\001\019\001\208\000\024\001\032\001\
\049\001\235\001\097\001\098\001\031\001\062\000\039\001\027\001\
\029\001\252\002\253\002\208\000\208\000\239\002\033\001\208\000\
\101\001\208\000\208\000\208\000\152\002\194\000\194\000\047\002\
\102\002\044\001\102\002\249\002\027\001\102\002\029\001\247\000\
\247\000\032\001\237\002\041\001\112\001\183\000\042\001\183\000\
\028\001\136\001\183\000\237\002\135\000\222\002\136\001\136\001\
\136\001\136\001\052\001\156\000\020\003\089\001\090\001\091\001\
\092\001\093\001\094\001\058\001\208\000\050\001\082\000\083\000\
\030\001\027\001\056\001\056\001\027\001\027\003\254\002\255\002\
\030\001\031\002\032\002\104\002\234\002\052\000\053\001\045\001\
\216\000\216\000\054\001\132\001\132\001\136\001\033\002\034\002\
\047\002\132\001\045\000\039\002\040\002\058\001\132\001\132\001\
\132\001\132\001\057\001\132\001\064\002\060\001\208\001\045\001\
\219\002\061\001\045\001\045\001\206\000\206\000\045\001\025\001\
\062\001\045\001\026\001\027\001\064\002\084\000\027\000\063\001\
\084\000\084\000\169\001\170\001\084\000\183\000\033\003\064\001\
\058\001\171\001\172\001\058\001\070\001\132\001\058\001\058\001\
\058\001\071\001\047\002\021\003\208\001\177\001\178\001\025\001\
\074\001\075\001\026\001\027\001\045\001\045\001\027\000\045\001\
\045\001\083\001\045\001\045\001\045\001\084\000\084\001\082\003\
\104\001\046\003\084\000\206\000\084\000\056\001\105\001\084\000\
\084\000\084\000\084\000\084\000\084\000\095\001\045\001\106\001\
\045\001\206\000\206\000\107\001\147\001\206\000\029\000\206\000\
\206\000\206\000\108\001\045\001\084\000\045\001\145\001\050\003\
\051\003\052\003\113\001\033\000\146\001\034\000\045\001\056\001\
\148\001\084\000\154\001\084\000\156\001\153\001\040\000\157\001\
\114\001\115\001\160\001\161\001\084\000\069\003\029\000\138\000\
\197\001\187\001\185\001\162\001\138\000\138\000\138\000\186\001\
\201\001\202\001\206\000\033\000\204\001\034\000\116\001\117\001\
\207\001\118\001\056\001\210\001\119\001\056\001\040\000\221\001\
\056\001\056\001\056\001\222\001\027\002\028\002\029\002\030\002\
\030\002\030\002\030\002\030\002\030\002\030\002\030\002\030\002\
\030\002\030\002\030\002\030\002\030\002\030\002\010\001\011\001\
\012\001\013\001\157\000\157\000\157\000\157\000\157\000\157\000\
\157\000\157\000\157\000\157\000\157\000\157\000\157\000\157\000\
\157\000\223\001\157\000\157\000\157\000\157\000\157\000\157\000\
\157\000\157\000\157\000\157\000\157\000\157\000\157\000\157\000\
\157\000\157\000\157\000\157\000\227\001\231\001\077\000\139\001\
\140\001\141\001\142\001\228\001\229\001\230\001\088\000\238\001\
\243\001\089\000\090\000\242\001\246\001\247\001\093\000\157\000\
\157\000\157\000\249\001\250\001\157\000\157\000\000\002\001\002\
\157\000\157\000\002\002\003\002\007\002\157\000\157\000\008\002\
\157\000\157\000\157\000\150\000\051\002\151\000\157\000\052\002\
\053\002\055\002\157\000\157\000\157\000\157\000\157\000\157\000\
\157\000\157\000\157\000\157\000\157\000\157\000\054\002\056\002\
\071\002\157\000\157\000\157\000\157\000\157\000\157\000\075\002\
\157\000\074\002\139\002\157\000\157\000\157\000\157\000\157\000\
\157\000\157\000\157\000\112\002\114\002\115\002\157\000\157\000\
\125\002\157\000\124\002\127\002\157\000\126\002\128\002\157\000\
\157\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
\150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
\130\002\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
\150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
\150\000\150\000\150\000\131\002\121\001\122\001\123\001\124\001\
\125\001\126\001\127\001\128\001\129\001\130\001\131\001\035\002\
\036\002\037\002\038\002\133\002\134\002\135\002\150\000\150\000\
\150\000\140\002\141\002\150\000\150\000\143\002\142\002\150\000\
\150\000\255\001\145\002\147\002\150\000\150\000\148\002\150\000\
\150\000\150\000\155\002\152\001\138\002\150\000\150\002\151\002\
\154\002\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
\150\000\150\000\150\000\150\000\150\000\157\002\158\002\160\002\
\150\000\150\000\150\000\150\000\150\000\150\000\162\002\150\000\
\167\002\171\002\178\002\150\000\150\000\150\000\150\000\150\000\
\150\000\150\000\172\002\173\002\185\002\150\000\150\000\181\002\
\150\000\191\002\192\002\150\000\030\002\193\002\150\000\150\000\
\164\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
\164\000\164\000\164\000\164\000\164\000\164\000\164\000\195\002\
\164\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
\164\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
\164\000\164\000\016\002\017\002\018\002\019\002\020\002\021\002\
\022\002\023\002\024\002\025\002\026\002\173\001\174\001\175\001\
\176\001\197\002\199\002\200\002\201\002\164\000\164\000\164\000\
\202\002\206\002\164\000\164\000\207\002\208\002\164\000\164\000\
\209\002\210\002\233\002\164\000\164\000\214\002\164\000\164\000\
\164\000\215\002\246\002\232\002\164\000\247\002\000\003\238\002\
\164\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
\164\000\164\000\164\000\164\000\240\002\001\003\002\003\164\000\
\164\000\164\000\164\000\164\000\164\000\003\003\164\000\007\003\
\009\003\008\003\164\000\164\000\164\000\164\000\164\000\164\000\
\164\000\011\003\012\003\013\003\164\000\164\000\017\003\164\000\
\018\003\031\003\164\000\034\003\025\003\164\000\164\000\077\002\
\078\002\190\000\191\000\192\000\193\000\005\000\081\000\194\000\
\006\000\007\000\008\000\009\000\010\000\011\000\029\003\012\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\
\075\000\022\000\023\000\024\000\025\000\026\000\027\000\195\000\
\196\000\037\003\038\003\039\003\040\003\041\003\043\003\060\003\
\061\003\042\003\065\003\044\003\048\003\062\003\055\003\063\003\
\064\003\066\003\006\000\070\003\197\000\198\000\199\000\075\003\
\071\003\200\000\201\000\068\003\072\003\202\000\203\000\073\003\
\078\003\079\003\204\000\205\000\087\003\206\000\085\003\146\000\
\086\003\006\001\045\001\079\002\192\000\018\001\008\001\080\002\
\081\002\082\002\083\002\084\002\085\002\086\002\087\002\088\002\
\089\002\090\002\091\002\021\000\239\000\142\001\029\000\030\000\
\092\002\032\000\082\000\083\000\139\001\207\000\038\001\022\000\
\006\000\208\000\209\000\033\000\093\002\034\000\035\000\036\000\
\134\000\136\000\141\000\039\000\210\000\121\000\040\000\152\000\
\159\000\094\002\119\000\245\000\095\002\096\002\066\001\066\001\
\066\001\066\001\066\001\066\001\150\001\066\001\066\001\023\001\
\079\001\079\001\079\001\079\001\079\001\079\001\079\001\079\001\
\079\001\079\001\079\001\079\001\079\001\136\000\079\001\079\001\
\079\001\155\001\079\001\079\001\079\001\079\001\066\001\066\001\
\079\001\136\000\163\001\167\001\079\001\079\001\079\001\079\001\
\079\001\169\001\079\001\054\000\022\001\016\003\019\003\220\001\
\168\002\073\002\190\001\066\001\066\001\066\001\169\002\212\002\
\066\001\066\001\035\001\041\002\066\001\066\001\221\002\042\002\
\205\002\066\001\066\001\024\003\066\001\155\000\066\001\043\002\
\047\003\044\002\066\001\045\002\079\001\113\002\066\001\066\001\
\066\001\066\001\066\001\066\001\066\001\066\001\066\001\066\001\
\066\001\066\001\004\003\177\000\056\001\179\001\181\001\066\001\
\180\001\066\001\066\001\182\001\066\001\183\001\077\003\088\003\
\066\001\066\001\076\003\066\001\000\000\077\002\183\002\190\000\
\191\000\192\000\193\000\066\001\081\000\194\000\123\001\123\001\
\066\001\000\000\000\000\066\001\066\001\000\000\000\000\000\000\
\000\000\000\000\123\001\123\001\123\001\000\000\123\001\123\001\
\000\000\000\000\000\000\000\000\123\001\195\000\196\000\000\000\
\000\000\123\001\123\001\123\001\123\001\000\000\123\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\197\000\198\000\199\000\000\000\000\000\200\000\
\201\000\000\000\000\000\202\000\203\000\000\000\000\000\000\000\
\204\000\205\000\000\000\206\000\000\000\146\000\000\000\000\000\
\123\001\079\002\000\000\000\000\000\000\080\002\081\002\082\002\
\083\002\084\002\085\002\086\002\087\002\088\002\089\002\090\002\
\091\002\000\000\000\000\000\000\000\000\000\000\092\002\000\000\
\082\000\083\000\000\000\207\000\000\000\000\000\000\000\208\000\
\209\000\000\000\093\002\000\000\066\001\066\001\066\001\066\001\
\066\001\066\001\210\000\066\001\066\001\124\001\124\001\094\002\
\000\000\000\000\095\002\096\002\000\000\000\000\000\000\000\000\
\000\000\124\001\124\001\124\001\000\000\124\001\124\001\000\000\
\000\000\000\000\000\000\124\001\066\001\066\001\000\000\000\000\
\124\001\124\001\124\001\124\001\000\000\124\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\066\001\066\001\066\001\000\000\000\000\066\001\066\001\
\000\000\000\000\066\001\066\001\000\000\000\000\000\000\066\001\
\066\001\000\000\066\001\000\000\066\001\000\000\000\000\124\001\
\066\001\000\000\000\000\000\000\066\001\066\001\066\001\066\001\
\066\001\066\001\066\001\066\001\066\001\066\001\066\001\066\001\
\000\000\000\000\000\000\000\000\000\000\066\001\000\000\066\001\
\066\001\000\000\066\001\000\000\000\000\000\000\066\001\066\001\
\000\000\066\001\000\000\000\000\000\000\000\000\000\000\000\000\
\086\000\066\001\000\000\086\000\086\000\000\000\066\001\086\000\
\000\000\066\001\066\001\099\001\189\000\190\000\191\000\192\000\
\193\000\005\000\081\000\194\000\006\000\007\000\008\000\009\000\
\010\000\011\000\000\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000\075\000\022\000\023\000\024\000\
\025\000\026\000\027\000\195\000\196\000\086\000\000\000\086\000\
\000\000\000\000\086\000\086\000\086\000\086\000\086\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\197\000\198\000\199\000\000\000\000\000\200\000\201\000\086\000\
\000\000\202\000\203\000\000\000\133\001\133\001\204\000\205\000\
\000\000\206\000\133\001\146\000\086\000\000\000\086\000\133\001\
\133\001\133\001\133\001\000\000\133\001\000\000\000\000\086\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\029\000\030\000\000\000\032\000\082\000\083\000\
\000\000\207\000\000\000\000\000\000\000\208\000\209\000\033\000\
\000\000\034\000\000\000\000\000\000\000\000\000\133\001\039\000\
\210\000\000\000\040\000\011\002\189\000\190\000\191\000\192\000\
\193\000\005\000\081\000\194\000\006\000\007\000\008\000\009\000\
\010\000\011\000\000\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000\075\000\022\000\023\000\024\000\
\025\000\026\000\027\000\195\000\196\000\134\001\000\000\000\000\
\000\000\000\000\134\001\000\000\000\000\000\000\000\000\134\001\
\134\001\134\001\134\001\000\000\134\001\000\000\000\000\000\000\
\197\000\198\000\199\000\000\000\000\000\200\000\201\000\000\000\
\000\000\202\000\203\000\000\000\000\000\000\000\204\000\205\000\
\000\000\206\000\000\000\000\000\000\000\025\001\000\000\000\000\
\026\001\027\001\000\000\000\000\027\000\000\000\134\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\029\000\030\000\000\000\032\000\082\000\083\000\
\000\000\207\000\000\000\000\000\000\000\208\000\209\000\033\000\
\000\000\034\000\000\000\220\000\220\000\000\000\000\000\039\000\
\210\000\220\000\040\000\109\002\220\000\220\000\220\000\220\000\
\220\000\220\000\000\000\220\000\220\000\220\000\220\000\220\000\
\220\000\220\000\220\000\220\000\220\000\220\000\220\000\220\000\
\220\000\220\000\220\000\000\000\029\000\126\001\126\001\126\001\
\000\000\126\001\126\001\000\000\000\000\000\000\000\000\126\001\
\000\000\033\000\000\000\034\000\126\001\126\001\126\001\126\001\
\135\001\126\001\220\000\000\000\040\000\135\001\000\000\000\000\
\000\000\000\000\135\001\135\001\135\001\135\001\000\000\135\001\
\220\000\220\000\000\000\045\001\220\000\000\000\220\000\220\000\
\220\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\126\001\000\000\000\000\000\000\000\000\
\000\000\000\000\220\000\220\000\000\000\220\000\000\000\000\000\
\000\000\135\001\000\000\000\000\000\000\000\000\000\000\220\000\
\000\000\220\000\226\000\226\000\000\000\000\000\000\000\220\000\
\226\000\220\000\220\000\226\000\226\000\226\000\226\000\226\000\
\226\000\000\000\226\000\226\000\226\000\226\000\226\000\226\000\
\226\000\226\000\226\000\226\000\226\000\226\000\226\000\226\000\
\226\000\226\000\083\001\083\001\083\001\083\001\083\001\083\001\
\083\001\083\001\083\001\083\001\083\001\083\001\083\001\000\000\
\083\001\083\001\083\001\000\000\083\001\083\001\083\001\083\001\
\000\000\226\000\083\001\000\000\000\000\000\000\083\001\083\001\
\000\000\083\001\083\001\000\000\083\001\000\000\000\000\226\000\
\226\000\000\000\045\001\226\000\000\000\226\000\226\000\226\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\127\001\127\001\127\001\000\000\127\001\
\127\001\226\000\226\000\000\000\226\000\127\001\083\001\000\000\
\000\000\000\000\127\001\127\001\127\001\127\001\226\000\127\001\
\226\000\221\000\221\000\000\000\000\000\000\000\226\000\221\000\
\226\000\226\000\221\000\221\000\221\000\221\000\221\000\221\000\
\000\000\221\000\221\000\221\000\221\000\221\000\221\000\221\000\
\221\000\221\000\221\000\221\000\221\000\221\000\221\000\221\000\
\221\000\127\001\000\000\096\001\096\001\096\001\096\001\096\001\
\096\001\096\001\096\001\096\001\096\001\096\001\000\000\096\001\
\096\001\096\001\000\000\096\001\096\001\096\001\096\001\000\000\
\221\000\096\001\000\000\000\000\000\000\000\000\096\001\096\001\
\096\001\096\001\000\000\096\001\000\000\000\000\221\000\221\000\
\000\000\045\001\221\000\000\000\221\000\221\000\221\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\221\000\221\000\000\000\221\000\025\001\096\001\000\000\026\001\
\027\001\000\000\000\000\027\000\000\000\221\000\000\000\221\000\
\231\000\231\000\000\000\000\000\000\000\221\000\231\000\221\000\
\221\000\231\000\231\000\231\000\231\000\231\000\231\000\000\000\
\231\000\231\000\231\000\231\000\231\000\231\000\231\000\231\000\
\231\000\231\000\231\000\231\000\231\000\231\000\231\000\231\000\
\128\001\128\001\195\001\128\001\128\001\196\001\000\000\000\000\
\000\000\128\001\000\000\000\000\000\000\000\000\128\001\128\001\
\128\001\128\001\000\000\128\001\000\000\000\000\000\000\231\000\
\000\000\000\000\000\000\029\000\000\000\197\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\231\000\231\000\000\000\
\033\000\231\000\034\000\231\000\231\000\231\000\000\000\000\000\
\000\000\000\000\000\000\040\000\000\000\128\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\231\000\
\231\000\025\001\231\000\000\000\026\001\027\001\000\000\000\000\
\027\000\000\000\000\000\000\000\231\000\000\000\231\000\065\001\
\000\000\000\000\000\000\000\000\231\000\005\000\231\000\231\000\
\006\000\007\000\008\000\009\000\010\000\011\000\000\000\012\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\
\075\000\022\000\023\000\024\000\025\000\026\000\027\000\109\002\
\000\000\000\000\196\001\098\001\098\001\098\001\098\001\098\001\
\098\001\098\001\098\001\098\001\098\001\098\001\000\000\098\001\
\098\001\098\001\000\000\098\001\098\001\098\001\098\001\000\000\
\029\000\098\001\197\001\000\000\000\000\000\000\098\001\098\001\
\098\001\098\001\000\000\098\001\000\000\033\000\000\000\034\000\
\000\000\000\000\000\000\066\001\000\000\000\000\000\000\000\000\
\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\029\000\030\000\
\000\000\032\000\000\000\000\000\000\000\098\001\000\000\000\000\
\000\000\000\000\000\000\033\000\000\000\034\000\035\000\036\000\
\000\000\000\000\000\000\039\000\000\000\000\000\040\000\189\000\
\190\000\191\000\192\000\193\000\005\000\081\000\194\000\006\000\
\007\000\008\000\009\000\010\000\011\000\000\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\075\000\
\022\000\023\000\024\000\025\000\026\000\027\000\195\000\196\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\197\000\198\000\199\000\000\000\000\000\
\200\000\201\000\000\000\000\000\202\000\203\000\004\000\000\000\
\000\000\204\000\205\000\005\000\206\000\000\000\006\000\007\000\
\008\000\009\000\010\000\011\000\000\000\012\000\013\000\014\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\024\000\025\000\026\000\027\000\029\000\030\000\000\000\
\032\000\082\000\083\000\000\000\207\000\000\000\000\000\000\000\
\208\000\209\000\033\000\000\000\034\000\000\000\000\000\000\000\
\000\000\000\000\039\000\210\000\000\000\040\000\000\000\000\000\
\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\
\005\000\000\000\000\000\006\000\007\000\008\000\009\000\010\000\
\011\000\028\000\012\000\013\000\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\
\026\000\027\000\000\000\000\000\029\000\030\000\031\000\032\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\033\000\000\000\034\000\035\000\036\000\000\000\037\000\
\038\000\039\000\000\000\000\000\040\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\056\001\056\001\056\001\
\056\001\056\001\056\001\056\001\056\001\056\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\029\000\030\000\031\000\032\000\056\001\056\001\056\001\
\000\000\000\000\000\000\000\000\000\000\000\000\033\000\000\000\
\034\000\035\000\036\000\000\000\037\000\038\000\039\000\000\000\
\000\000\040\000\056\001\056\001\056\001\000\000\000\000\056\001\
\056\001\000\000\000\000\056\001\056\001\000\000\000\000\000\000\
\056\001\056\001\056\001\056\001\000\000\056\001\056\001\056\001\
\056\001\056\001\056\001\057\002\190\000\191\000\192\000\193\000\
\058\000\081\000\194\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\056\001\056\001\000\000\056\001\000\000\000\000\000\000\056\001\
\056\001\000\000\195\000\196\000\000\000\000\000\000\000\000\000\
\000\000\000\000\056\001\056\001\000\000\000\000\000\000\000\000\
\058\002\000\000\000\000\000\000\000\000\000\000\000\000\197\000\
\198\000\199\000\000\000\000\000\200\000\201\000\000\000\000\000\
\202\000\203\000\000\000\000\000\000\000\204\000\205\000\000\000\
\206\000\000\000\191\001\059\002\000\000\000\000\011\002\189\000\
\190\000\191\000\192\000\193\000\000\000\081\000\194\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\082\000\083\000\000\000\
\207\000\000\000\000\000\000\000\208\000\209\000\195\000\196\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\210\000\
\062\000\085\000\000\000\000\000\085\000\085\000\000\000\000\000\
\085\000\000\000\000\000\197\000\198\000\199\000\000\000\000\000\
\200\000\201\000\000\000\000\000\202\000\203\000\000\000\000\000\
\000\000\204\000\205\000\000\000\206\000\000\000\000\000\000\000\
\000\000\000\000\176\002\056\001\056\001\056\001\056\001\056\001\
\056\001\085\000\056\001\056\001\000\000\000\000\085\000\000\000\
\085\000\000\000\000\000\085\000\085\000\085\000\085\000\085\000\
\085\000\082\000\083\000\000\000\207\000\000\000\000\000\000\000\
\208\000\209\000\000\000\056\001\056\001\000\000\000\000\000\000\
\085\000\000\000\000\000\210\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\085\000\000\000\085\000\
\056\001\056\001\056\001\000\000\000\000\056\001\056\001\000\000\
\085\000\056\001\056\001\000\000\000\000\000\000\056\001\056\001\
\000\000\056\001\000\000\000\000\000\000\056\001\000\000\011\002\
\189\000\190\000\191\000\192\000\193\000\000\000\081\000\194\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\056\001\056\001\
\000\000\056\001\000\000\000\000\000\000\056\001\056\001\195\000\
\196\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\056\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\197\000\198\000\199\000\000\000\
\000\000\200\000\201\000\000\000\000\000\202\000\203\000\000\000\
\000\000\000\000\204\000\205\000\000\000\206\000\014\002\189\000\
\190\000\191\000\192\000\193\000\000\000\081\000\194\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\163\002\189\000\190\000\191\000\192\000\193\000\000\000\
\081\000\194\000\082\000\083\000\000\000\207\000\195\000\196\000\
\000\000\208\000\209\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\210\000\000\000\000\000\000\000\
\000\000\195\000\196\000\197\000\198\000\199\000\000\000\000\000\
\200\000\201\000\000\000\000\000\202\000\203\000\000\000\000\000\
\000\000\204\000\205\000\000\000\206\000\000\000\197\000\198\000\
\199\000\000\000\000\000\200\000\201\000\000\000\000\000\202\000\
\203\000\000\000\000\000\000\000\204\000\205\000\000\000\206\000\
\241\002\189\000\190\000\191\000\192\000\193\000\000\000\081\000\
\194\000\082\000\083\000\000\000\207\000\000\000\000\000\000\000\
\208\000\209\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\210\000\082\000\083\000\000\000\207\000\
\195\000\196\000\000\000\208\000\209\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\210\000\000\000\
\000\000\000\000\000\000\000\000\000\000\197\000\198\000\199\000\
\000\000\000\000\200\000\201\000\000\000\000\000\202\000\203\000\
\000\000\000\000\000\000\204\000\205\000\000\000\206\000\081\003\
\189\000\190\000\191\000\192\000\193\000\000\000\081\000\194\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\082\000\083\000\000\000\207\000\195\000\
\196\000\000\000\208\000\209\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\210\000\000\000\000\000\
\000\000\000\000\000\000\000\000\197\000\198\000\199\000\000\000\
\000\000\200\000\201\000\000\000\000\000\202\000\203\000\000\000\
\000\000\000\000\204\000\205\000\000\000\206\000\000\000\131\000\
\131\000\131\000\131\000\131\000\000\000\131\000\131\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\082\000\083\000\000\000\207\000\131\000\131\000\
\131\000\208\000\209\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\210\000\000\000\000\000\000\000\
\000\000\000\000\000\000\131\000\131\000\131\000\000\000\000\000\
\131\000\131\000\000\000\000\000\131\000\131\000\000\000\000\000\
\000\000\131\000\131\000\000\000\131\000\000\000\131\000\189\000\
\190\000\191\000\192\000\193\000\000\000\081\000\194\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\131\000\131\000\000\000\131\000\000\000\195\000\196\000\
\131\000\131\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\131\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\197\000\198\000\199\000\000\000\000\000\
\200\000\201\000\000\000\000\000\202\000\203\000\000\000\000\000\
\000\000\204\000\205\000\000\000\206\000\000\000\191\001\189\000\
\190\000\191\000\192\000\193\000\000\000\081\000\194\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\082\000\083\000\000\000\207\000\000\000\195\000\196\000\
\208\000\209\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\210\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\197\000\198\000\199\000\000\000\000\000\
\200\000\201\000\000\000\000\000\202\000\203\000\000\000\000\000\
\000\000\204\000\205\000\000\000\206\000\000\000\138\002\127\000\
\127\000\127\000\127\000\127\000\000\000\127\000\127\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\082\000\083\000\000\000\207\000\000\000\127\000\127\000\
\208\000\209\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\210\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\127\000\127\000\127\000\000\000\000\000\
\127\000\127\000\000\000\000\000\127\000\127\000\000\000\000\000\
\000\000\127\000\127\000\000\000\127\000\000\000\127\000\189\000\
\190\000\191\000\192\000\193\000\000\000\081\000\194\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\127\000\127\000\000\000\127\000\000\000\195\000\196\000\
\127\000\127\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\127\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\197\000\198\000\199\000\000\000\000\000\
\200\000\201\000\000\000\000\000\202\000\203\000\000\000\000\000\
\000\000\204\000\205\000\000\000\242\000\000\000\189\000\190\000\
\191\000\192\000\193\000\000\000\081\000\194\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\189\000\190\000\191\000\192\000\193\000\000\000\081\000\
\194\000\082\000\083\000\000\000\207\000\195\000\196\000\000\000\
\208\000\209\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\210\000\000\000\000\000\000\000\000\000\
\195\000\196\000\197\000\198\000\199\000\000\000\000\000\200\000\
\201\000\000\000\000\000\202\000\203\000\000\000\000\000\000\000\
\204\000\205\000\000\000\244\000\000\000\197\000\198\000\199\000\
\000\000\000\000\200\000\201\000\000\000\000\000\202\000\203\000\
\000\000\000\000\000\000\204\000\205\000\000\000\206\000\000\000\
\189\000\190\000\191\000\192\000\193\000\000\000\081\000\194\000\
\082\000\083\000\000\000\207\000\000\000\000\000\000\000\208\000\
\209\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\210\000\082\000\083\000\000\000\207\000\195\000\
\196\000\000\000\208\000\209\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\210\000\000\000\000\000\
\000\000\000\000\000\000\000\000\197\000\198\000\199\000\000\000\
\000\000\200\000\201\000\000\000\000\000\202\000\203\000\000\000\
\000\000\000\000\204\000\205\000\000\000\085\001\000\000\189\000\
\190\000\191\000\192\000\193\000\000\000\081\000\194\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\189\000\190\000\191\000\192\000\193\000\000\000\
\081\000\194\000\082\000\083\000\000\000\207\000\195\000\196\000\
\000\000\208\000\209\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\210\000\000\000\000\000\000\000\
\000\000\195\000\196\000\197\000\198\000\199\000\000\000\000\000\
\200\000\201\000\000\000\000\000\202\000\203\000\000\000\000\000\
\000\000\204\000\205\000\000\000\087\001\000\000\197\000\198\000\
\199\000\000\000\130\001\200\000\201\000\130\001\130\001\202\000\
\203\000\000\000\000\000\130\001\204\000\205\000\000\000\096\001\
\130\001\130\001\130\001\130\001\000\000\130\001\000\000\000\000\
\000\000\082\000\083\000\000\000\207\000\000\000\000\000\000\000\
\208\000\209\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\210\000\082\000\083\000\000\000\207\000\
\000\000\000\000\000\000\208\000\209\000\107\000\000\000\130\001\
\107\000\107\000\107\000\107\000\107\000\107\000\210\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\000\000\
\000\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\000\000\107\000\107\000\107\000\000\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\129\001\129\001\000\000\129\001\129\001\107\000\107\000\
\000\000\107\000\129\001\000\000\000\000\000\000\000\000\129\001\
\129\001\129\001\129\001\107\000\129\001\107\000\000\000\000\000\
\107\000\000\000\000\000\107\000\005\000\081\000\107\000\006\000\
\007\000\008\000\009\000\010\000\011\000\000\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\075\000\
\022\000\023\000\024\000\025\000\026\000\027\000\129\001\005\000\
\000\000\000\000\006\000\007\000\008\000\009\000\010\000\011\000\
\000\000\012\000\013\000\014\000\015\000\016\000\017\000\018\000\
\019\000\020\000\075\000\022\000\023\000\024\000\025\000\026\000\
\027\000\000\000\000\000\000\000\000\000\005\001\000\000\000\000\
\005\001\005\001\005\001\005\001\005\001\005\001\000\000\005\001\
\005\001\005\001\005\001\005\001\005\001\005\001\005\001\005\001\
\005\001\005\001\005\001\005\001\005\001\005\001\005\001\000\000\
\000\000\000\000\000\000\000\000\000\000\029\000\030\000\155\000\
\032\000\082\000\083\000\000\000\000\000\000\000\000\000\215\001\
\000\000\000\000\033\000\000\000\034\000\000\000\000\000\000\000\
\000\000\000\000\039\000\000\000\000\000\040\000\000\000\000\000\
\029\000\030\000\000\000\032\000\005\001\005\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\033\000\000\000\034\000\
\000\000\000\000\000\000\000\000\000\000\039\000\000\000\000\000\
\040\000\131\001\000\000\000\000\131\001\131\001\005\001\005\001\
\000\000\005\001\131\001\000\000\000\000\000\000\000\000\131\001\
\131\001\131\001\131\001\005\001\131\001\005\001\000\000\000\000\
\000\000\000\000\000\000\005\001\005\000\000\000\005\001\006\000\
\007\000\008\000\009\000\010\000\011\000\000\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\075\000\
\022\000\023\000\024\000\025\000\026\000\027\000\131\001\005\000\
\000\000\000\000\006\000\007\000\008\000\009\000\010\000\011\000\
\000\000\012\000\013\000\014\000\015\000\016\000\017\000\018\000\
\019\000\020\000\075\000\022\000\023\000\024\000\025\000\026\000\
\027\000\000\000\000\000\005\000\000\000\000\000\006\000\007\000\
\008\000\009\000\010\000\011\000\155\000\012\000\013\000\014\000\
\015\000\016\000\017\000\018\000\019\000\020\000\075\000\022\000\
\023\000\024\000\025\000\026\000\027\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\029\000\030\000\000\000\
\032\000\182\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\033\000\000\000\034\000\000\000\000\000\000\000\
\000\000\000\000\039\000\000\000\000\000\040\000\000\000\000\000\
\029\000\030\000\000\000\032\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\005\003\000\000\033\000\000\000\034\000\
\000\000\000\000\000\000\000\000\000\000\039\000\000\000\000\000\
\040\000\000\000\000\000\000\000\029\000\030\000\000\000\032\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\033\000\000\000\034\000\000\000\000\000\000\000\000\000\
\000\000\039\000\005\000\000\000\040\000\006\000\007\000\008\000\
\009\000\010\000\011\000\000\000\012\000\013\000\014\000\015\000\
\016\000\017\000\018\000\019\000\020\000\075\000\022\000\023\000\
\024\000\025\000\026\000\027\000\000\000\000\000\006\000\007\000\
\008\000\009\000\010\000\011\000\000\000\012\000\013\000\014\000\
\015\000\016\000\017\000\018\000\019\000\020\000\075\000\022\000\
\023\000\024\000\025\000\026\000\027\000\000\000\000\000\000\000\
\100\001\100\001\100\001\100\001\100\001\100\001\100\001\100\001\
\100\001\100\001\100\001\000\000\100\001\100\001\100\001\000\000\
\100\001\100\001\100\001\100\001\000\000\000\000\100\001\000\000\
\000\000\000\000\000\000\100\001\100\001\100\001\100\001\000\000\
\100\001\000\000\000\000\029\000\030\000\000\000\032\000\000\000\
\000\000\000\000\000\000\000\000\000\000\234\000\098\000\000\000\
\033\000\099\000\034\000\100\000\081\000\000\000\000\000\000\000\
\039\000\000\000\000\000\040\000\029\000\030\000\000\000\032\000\
\234\000\098\000\100\001\000\000\099\000\101\000\100\000\081\000\
\102\000\033\000\000\000\034\000\000\000\103\000\104\000\000\000\
\000\000\039\000\000\000\000\000\040\000\000\000\000\000\000\000\
\101\000\000\000\000\000\102\000\000\000\000\000\000\000\000\000\
\103\000\104\000\105\000\106\000\107\000\000\000\000\000\108\000\
\109\000\000\000\000\000\110\000\000\000\000\000\000\000\000\000\
\000\000\000\000\155\001\111\000\000\000\105\000\106\000\107\000\
\000\000\000\000\108\000\109\000\000\000\000\000\110\000\000\000\
\000\000\080\001\098\000\112\000\000\000\099\000\111\000\100\000\
\081\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\082\000\083\000\000\000\000\000\048\002\098\000\112\000\000\000\
\099\000\101\000\100\000\081\000\102\000\000\000\000\000\000\000\
\000\000\103\000\104\000\082\000\083\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\101\000\000\000\000\000\102\000\
\000\000\000\000\000\000\000\000\103\000\104\000\105\000\106\000\
\107\000\000\000\000\000\108\000\109\000\000\000\000\000\110\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\111\000\
\000\000\105\000\106\000\107\000\000\000\000\000\108\000\109\000\
\000\000\000\000\110\000\000\000\000\000\000\000\098\000\112\000\
\000\000\099\000\111\000\100\000\081\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\082\000\083\000\000\000\000\000\
\000\000\000\000\112\000\000\000\000\000\101\000\000\000\000\000\
\102\000\000\000\000\000\000\000\000\000\103\000\104\000\082\000\
\083\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\105\000\106\000\107\000\000\000\000\000\108\000\
\109\000\000\000\000\000\110\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\111\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\112\000\000\000\000\000\000\000\000\000\
\106\000\000\000\000\000\106\000\106\000\000\000\000\000\106\000\
\082\000\083\000\106\000\106\000\106\000\106\000\106\000\106\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
\106\000\106\000\000\000\106\000\106\000\106\000\000\000\106\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
\000\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\106\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\106\000\000\000\106\000\042\000\
\000\000\106\000\042\000\042\000\000\000\000\000\042\000\106\000\
\000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\000\000\000\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\000\000\042\000\042\000\042\000\000\000\042\000\042\000\
\042\000\042\000\000\000\000\000\042\000\000\000\042\000\000\000\
\000\000\042\000\042\000\042\000\042\000\042\000\042\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\042\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\042\000\000\000\042\000\046\000\000\000\
\042\000\046\000\046\000\000\000\000\000\046\000\042\000\000\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\000\000\000\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\000\000\046\000\046\000\046\000\000\000\046\000\046\000\046\000\
\046\000\000\000\000\000\046\000\000\000\046\000\000\000\000\000\
\046\000\046\000\046\000\046\000\046\000\046\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\046\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\046\000\000\000\046\000\048\000\000\000\046\000\
\048\000\048\000\000\000\000\000\048\000\046\000\000\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\000\000\000\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\000\000\
\048\000\048\000\048\000\000\000\048\000\048\000\048\000\048\000\
\000\000\000\000\048\000\000\000\048\000\000\000\000\000\048\000\
\048\000\048\000\048\000\048\000\048\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\048\000\000\000\058\000\000\000\
\000\000\058\000\058\000\000\000\000\000\058\000\000\000\000\000\
\000\000\048\000\000\000\048\000\000\000\000\000\048\000\000\000\
\000\000\000\000\000\000\000\000\048\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\000\000\058\000\058\000\058\000\000\000\058\000\058\000\058\000\
\058\000\000\000\000\000\058\000\000\000\058\000\000\000\000\000\
\058\000\058\000\058\000\058\000\058\000\058\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\058\000\000\000\062\000\
\000\000\000\000\062\000\062\000\000\000\000\000\062\000\000\000\
\000\000\000\000\058\000\000\000\058\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\058\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\000\000\000\000\
\000\000\000\000\062\000\062\000\062\000\000\000\062\000\062\000\
\062\000\062\000\000\000\000\000\062\000\000\000\062\000\000\000\
\000\000\062\000\062\000\062\000\062\000\062\000\062\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\062\000\000\000\
\063\000\000\000\000\000\063\000\063\000\000\000\000\000\063\000\
\000\000\000\000\000\000\062\000\000\000\062\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\062\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\000\000\
\000\000\000\000\000\000\063\000\063\000\063\000\000\000\063\000\
\063\000\063\000\063\000\000\000\000\000\063\000\000\000\063\000\
\000\000\000\000\063\000\063\000\063\000\063\000\063\000\063\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\063\000\
\000\000\064\000\000\000\000\000\064\000\064\000\000\000\000\000\
\064\000\000\000\000\000\000\000\063\000\000\000\063\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\063\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\000\000\000\000\000\000\000\000\064\000\064\000\064\000\000\000\
\064\000\064\000\064\000\064\000\000\000\000\000\064\000\000\000\
\064\000\000\000\000\000\064\000\064\000\064\000\064\000\064\000\
\064\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\065\000\000\000\000\000\065\000\065\000\000\000\
\064\000\065\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\064\000\000\000\064\000\
\000\000\065\000\065\000\065\000\065\000\065\000\065\000\000\000\
\064\000\000\000\000\000\000\000\000\000\065\000\065\000\065\000\
\000\000\065\000\065\000\065\000\065\000\000\000\000\000\065\000\
\000\000\065\000\000\000\000\000\065\000\065\000\065\000\065\000\
\065\000\065\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\066\000\000\000\000\000\066\000\066\000\
\000\000\065\000\066\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\065\000\000\000\
\065\000\000\000\066\000\066\000\066\000\066\000\066\000\066\000\
\000\000\065\000\000\000\000\000\000\000\000\000\066\000\066\000\
\066\000\000\000\066\000\066\000\066\000\066\000\000\000\000\000\
\066\000\000\000\066\000\000\000\000\000\066\000\066\000\066\000\
\066\000\066\000\066\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\067\000\000\000\000\000\067\000\
\067\000\000\000\066\000\067\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\066\000\
\000\000\066\000\000\000\067\000\067\000\067\000\067\000\067\000\
\067\000\000\000\066\000\000\000\000\000\000\000\000\000\067\000\
\067\000\067\000\000\000\067\000\067\000\067\000\067\000\000\000\
\000\000\067\000\000\000\067\000\000\000\000\000\067\000\067\000\
\067\000\067\000\067\000\067\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\068\000\000\000\000\000\
\068\000\068\000\000\000\067\000\068\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\067\000\000\000\067\000\000\000\068\000\068\000\068\000\068\000\
\068\000\068\000\000\000\067\000\000\000\000\000\000\000\000\000\
\068\000\068\000\068\000\000\000\068\000\068\000\000\000\000\000\
\000\000\000\000\068\000\000\000\068\000\000\000\000\000\068\000\
\068\000\068\000\068\000\068\000\068\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\069\000\000\000\
\000\000\069\000\069\000\000\000\068\000\069\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\068\000\000\000\068\000\000\000\069\000\069\000\069\000\
\069\000\069\000\069\000\000\000\068\000\000\000\000\000\000\000\
\000\000\069\000\069\000\069\000\000\000\069\000\069\000\000\000\
\000\000\000\000\000\000\069\000\000\000\069\000\000\000\000\000\
\069\000\069\000\069\000\069\000\069\000\069\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\070\000\
\000\000\000\000\070\000\070\000\000\000\069\000\070\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\069\000\000\000\069\000\000\000\070\000\070\000\
\070\000\070\000\070\000\070\000\000\000\069\000\000\000\000\000\
\000\000\000\000\070\000\070\000\070\000\000\000\070\000\070\000\
\000\000\000\000\000\000\000\000\070\000\000\000\070\000\000\000\
\000\000\070\000\070\000\070\000\070\000\070\000\070\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\071\000\000\000\000\000\071\000\071\000\000\000\070\000\071\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\070\000\000\000\070\000\000\000\071\000\
\071\000\071\000\071\000\071\000\071\000\000\000\070\000\000\000\
\000\000\000\000\000\000\071\000\071\000\071\000\000\000\071\000\
\071\000\000\000\000\000\000\000\000\000\071\000\000\000\071\000\
\000\000\000\000\071\000\071\000\071\000\071\000\071\000\071\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\072\000\000\000\000\000\072\000\072\000\000\000\071\000\
\072\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\071\000\000\000\071\000\000\000\
\072\000\072\000\072\000\072\000\072\000\072\000\000\000\071\000\
\000\000\000\000\000\000\000\000\072\000\072\000\072\000\000\000\
\072\000\072\000\000\000\000\000\000\000\000\000\072\000\000\000\
\072\000\000\000\000\000\072\000\072\000\072\000\072\000\072\000\
\072\000\000\000\073\000\000\000\000\000\073\000\073\000\000\000\
\000\000\073\000\000\000\000\000\000\000\000\000\000\000\000\000\
\072\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\073\000\073\000\000\000\000\000\072\000\000\000\072\000\
\000\000\000\000\000\000\000\000\000\000\073\000\073\000\073\000\
\072\000\073\000\073\000\000\000\000\000\000\000\000\000\073\000\
\000\000\073\000\000\000\000\000\073\000\073\000\073\000\073\000\
\073\000\073\000\000\000\074\000\000\000\000\000\074\000\074\000\
\000\000\000\000\074\000\000\000\000\000\000\000\000\000\000\000\
\000\000\073\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\074\000\074\000\000\000\000\000\073\000\000\000\
\073\000\000\000\000\000\000\000\000\000\000\000\074\000\074\000\
\074\000\073\000\074\000\074\000\000\000\000\000\000\000\000\000\
\074\000\000\000\074\000\000\000\000\000\074\000\074\000\074\000\
\074\000\074\000\074\000\000\000\075\000\000\000\000\000\075\000\
\075\000\000\000\000\000\075\000\000\000\000\000\000\000\000\000\
\000\000\000\000\074\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\075\000\075\000\000\000\000\000\074\000\
\000\000\074\000\000\000\000\000\000\000\000\000\000\000\075\000\
\075\000\075\000\074\000\075\000\075\000\000\000\000\000\000\000\
\000\000\075\000\000\000\075\000\000\000\000\000\075\000\075\000\
\075\000\075\000\075\000\075\000\000\000\076\000\000\000\000\000\
\076\000\076\000\000\000\000\000\076\000\000\000\000\000\000\000\
\000\000\000\000\000\000\075\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\075\000\000\000\075\000\000\000\000\000\000\000\000\000\000\000\
\076\000\076\000\076\000\075\000\076\000\076\000\000\000\000\000\
\000\000\000\000\076\000\000\000\076\000\000\000\000\000\076\000\
\076\000\076\000\076\000\076\000\076\000\000\000\077\000\000\000\
\000\000\077\000\077\000\000\000\000\000\077\000\000\000\000\000\
\000\000\000\000\000\000\000\000\076\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\076\000\000\000\076\000\000\000\000\000\000\000\000\000\
\000\000\077\000\077\000\077\000\076\000\077\000\077\000\000\000\
\000\000\000\000\000\000\077\000\000\000\077\000\000\000\000\000\
\077\000\077\000\077\000\077\000\077\000\077\000\000\000\078\000\
\000\000\000\000\078\000\078\000\000\000\000\000\078\000\000\000\
\000\000\000\000\000\000\000\000\000\000\077\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\077\000\079\000\077\000\000\000\079\000\079\000\
\000\000\000\000\079\000\078\000\078\000\077\000\078\000\078\000\
\000\000\000\000\000\000\000\000\078\000\000\000\078\000\000\000\
\000\000\078\000\078\000\078\000\078\000\078\000\078\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\079\000\
\079\000\000\000\079\000\079\000\000\000\000\000\078\000\000\000\
\079\000\000\000\079\000\000\000\000\000\079\000\079\000\079\000\
\079\000\079\000\079\000\078\000\080\000\078\000\000\000\080\000\
\080\000\000\000\000\000\080\000\000\000\000\000\078\000\000\000\
\000\000\000\000\079\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\079\000\
\081\000\079\000\000\000\081\000\081\000\000\000\000\000\081\000\
\080\000\000\000\079\000\080\000\080\000\000\000\000\000\000\000\
\000\000\080\000\000\000\080\000\000\000\000\000\080\000\080\000\
\080\000\080\000\080\000\080\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\081\000\000\000\000\000\081\000\
\081\000\000\000\000\000\080\000\000\000\081\000\000\000\081\000\
\000\000\000\000\081\000\081\000\081\000\081\000\081\000\081\000\
\080\000\082\000\080\000\000\000\082\000\082\000\000\000\000\000\
\082\000\000\000\000\000\080\000\000\000\000\000\000\000\081\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\081\000\083\000\081\000\000\000\
\083\000\083\000\000\000\000\000\083\000\000\000\000\000\081\000\
\082\000\082\000\000\000\000\000\000\000\000\000\082\000\000\000\
\082\000\000\000\000\000\082\000\082\000\082\000\082\000\082\000\
\082\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\083\000\083\000\000\000\000\000\
\082\000\000\000\083\000\000\000\083\000\000\000\000\000\083\000\
\083\000\083\000\083\000\083\000\083\000\082\000\000\000\082\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\082\000\000\000\000\000\000\000\083\000\000\000\000\000\000\000\
\112\001\112\001\112\001\112\001\112\001\112\001\112\001\112\001\
\000\000\083\000\000\000\083\000\112\001\112\001\112\001\000\000\
\112\001\112\001\112\001\112\001\083\000\000\000\112\001\000\000\
\000\000\000\000\000\000\112\001\112\001\112\001\112\001\000\000\
\112\001\113\001\113\001\113\001\113\001\113\001\113\001\113\001\
\113\001\000\000\000\000\000\000\000\000\113\001\113\001\113\001\
\000\000\113\001\113\001\113\001\113\001\000\000\000\000\113\001\
\000\000\000\000\000\000\000\000\113\001\113\001\113\001\113\001\
\000\000\113\001\112\001\000\000\114\001\114\001\114\001\114\001\
\114\001\114\001\114\001\114\001\000\000\000\000\000\000\000\000\
\114\001\114\001\114\001\000\000\114\001\114\001\114\001\114\001\
\000\000\000\000\114\001\000\000\000\000\000\000\000\000\114\001\
\114\001\114\001\114\001\113\001\114\001\115\001\115\001\115\001\
\115\001\115\001\115\001\000\000\000\000\000\000\000\000\000\000\
\000\000\115\001\115\001\115\001\000\000\115\001\115\001\115\001\
\115\001\000\000\000\000\115\001\000\000\000\000\000\000\000\000\
\115\001\115\001\115\001\115\001\000\000\115\001\114\001\000\000\
\116\001\116\001\116\001\116\001\116\001\116\001\000\000\000\000\
\000\000\000\000\000\000\000\000\116\001\116\001\116\001\000\000\
\116\001\116\001\116\001\116\001\000\000\000\000\116\001\000\000\
\000\000\000\000\000\000\116\001\116\001\116\001\116\001\115\001\
\116\001\117\001\117\001\117\001\117\001\117\001\117\001\000\000\
\000\000\000\000\000\000\000\000\000\000\117\001\117\001\117\001\
\000\000\117\001\117\001\117\001\117\001\000\000\000\000\117\001\
\000\000\000\000\000\000\000\000\117\001\117\001\117\001\117\001\
\000\000\117\001\116\001\000\000\118\001\118\001\118\001\118\001\
\118\001\118\001\000\000\000\000\000\000\000\000\000\000\000\000\
\118\001\118\001\118\001\000\000\118\001\118\001\000\000\000\000\
\000\000\000\000\118\001\000\000\000\000\000\000\000\000\118\001\
\118\001\118\001\118\001\117\001\118\001\119\001\119\001\119\001\
\119\001\119\001\119\001\000\000\000\000\000\000\000\000\000\000\
\000\000\119\001\119\001\119\001\000\000\119\001\119\001\000\000\
\000\000\000\000\000\000\119\001\000\000\000\000\000\000\000\000\
\119\001\119\001\119\001\119\001\000\000\119\001\118\001\000\000\
\120\001\120\001\120\001\120\001\120\001\120\001\000\000\000\000\
\000\000\000\000\000\000\000\000\120\001\120\001\120\001\000\000\
\120\001\120\001\000\000\000\000\000\000\000\000\120\001\000\000\
\000\000\000\000\000\000\120\001\120\001\120\001\120\001\119\001\
\120\001\121\001\121\001\121\001\121\001\121\001\121\001\000\000\
\000\000\000\000\000\000\000\000\000\000\121\001\121\001\121\001\
\000\000\121\001\121\001\000\000\000\000\000\000\000\000\121\001\
\000\000\000\000\000\000\000\000\121\001\121\001\121\001\121\001\
\000\000\121\001\120\001\000\000\122\001\122\001\122\001\122\001\
\122\001\122\001\000\000\000\000\000\000\000\000\000\000\000\000\
\122\001\122\001\122\001\000\000\122\001\122\001\000\000\000\000\
\000\000\000\000\122\001\125\001\125\001\000\000\000\000\122\001\
\122\001\122\001\122\001\121\001\122\001\000\000\000\000\125\001\
\125\001\125\001\000\000\125\001\125\001\000\000\000\000\000\000\
\000\000\125\001\000\000\000\000\000\000\000\000\125\001\125\001\
\125\001\125\001\000\000\125\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\122\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\125\001\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\000\000\023\000\
\023\000\023\000\000\000\023\000\023\000\023\000\023\000\023\000\
\023\000\000\000\023\000\023\000\000\000\023\000\000\000\018\000\
\000\000\023\000\000\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\000\000\023\000\023\000\023\000\
\000\000\023\000\023\000\023\000\023\000\023\000\023\000\000\000\
\023\000\000\000\000\000\023\000\000\000\000\000\023\000\023\000\
\000\000\023\000"

let yycheck = "\021\000\
\095\000\045\000\049\000\028\000\015\000\156\000\084\000\004\000\
\001\000\002\000\061\000\033\001\135\000\000\000\036\000\145\000\
\000\000\045\000\021\001\044\000\155\000\001\000\002\000\042\001\
\000\000\088\002\035\001\000\001\058\001\059\001\178\000\199\001\
\001\001\185\002\014\000\028\000\131\000\006\001\036\000\085\000\
\030\001\021\000\022\000\152\002\034\001\025\000\026\000\098\000\
\028\000\000\001\030\000\044\000\162\002\186\000\012\000\013\000\
\000\001\015\000\055\001\074\001\071\000\072\000\077\001\206\000\
\044\000\216\000\046\000\001\001\079\000\080\000\076\001\051\000\
\094\000\053\000\096\000\001\001\056\000\165\000\166\000\076\001\
\006\001\000\001\055\001\105\000\106\000\107\000\108\000\109\000\
\110\000\111\000\200\002\001\001\045\001\046\001\007\001\075\000\
\006\001\095\001\250\002\242\000\000\001\244\000\001\001\070\001\
\084\000\084\002\064\000\113\001\087\002\000\001\108\001\090\002\
\156\000\111\000\072\000\095\000\179\002\226\002\000\001\182\002\
\073\001\072\001\080\000\186\002\206\000\076\001\095\001\071\001\
\156\000\055\001\105\000\106\000\107\000\108\000\109\000\110\000\
\070\001\130\000\055\001\108\001\070\001\001\001\153\000\031\001\
\070\001\000\001\006\001\073\001\044\003\118\001\130\000\120\001\
\121\001\072\001\123\001\124\001\055\001\182\000\075\001\206\000\
\242\000\070\001\244\000\030\001\186\000\176\000\046\001\034\001\
\035\001\215\000\181\000\050\001\072\001\236\002\066\001\155\000\
\195\001\069\001\070\001\071\001\243\002\072\001\074\001\075\001\
\055\001\076\001\099\001\100\001\216\000\182\000\072\001\200\001\
\118\001\073\001\033\001\242\000\226\001\244\000\085\001\111\002\
\087\001\070\001\182\000\212\001\075\001\076\001\196\001\095\001\
\118\001\096\001\070\001\000\001\024\001\073\001\053\001\027\001\
\238\000\072\001\105\001\106\001\108\001\211\001\110\001\213\001\
\031\003\099\001\206\000\156\000\060\001\120\001\121\001\119\001\
\123\001\124\001\070\001\042\003\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\028\001\064\003\118\001\085\001\002\001\087\001\242\000\055\001\
\244\000\104\001\138\002\007\001\247\002\000\001\096\001\071\001\
\000\001\252\002\008\002\152\001\153\001\077\001\070\001\067\001\
\000\001\073\001\154\002\072\001\003\001\004\001\005\001\216\000\
\064\001\013\000\000\001\015\000\118\001\119\001\085\001\034\001\
\087\001\052\001\000\001\001\001\066\002\001\001\064\001\079\001\
\001\001\096\001\006\001\054\002\001\001\006\001\069\001\001\001\
\072\001\006\001\001\001\069\001\006\001\079\001\077\001\006\001\
\044\001\075\001\071\001\001\001\150\001\072\001\050\001\076\001\
\006\001\196\001\069\001\120\001\121\001\200\001\123\001\124\001\
\075\001\076\001\077\001\231\001\071\001\065\000\234\001\001\001\
\211\001\212\001\213\001\070\001\006\001\079\003\242\001\046\001\
\191\001\001\001\246\001\055\001\069\001\087\003\006\001\099\001\
\100\001\085\001\072\001\087\001\077\001\055\001\076\001\077\001\
\074\001\069\001\070\001\077\001\096\001\073\001\069\001\072\001\
\000\001\077\001\073\001\072\001\070\001\105\001\106\001\205\001\
\000\000\069\001\152\001\153\001\069\001\073\001\156\002\069\001\
\070\001\077\001\233\001\073\001\077\001\008\002\075\001\077\001\
\024\001\078\001\095\001\027\001\028\001\070\001\194\001\031\001\
\073\001\204\001\034\001\000\001\114\001\115\001\072\001\108\001\
\053\001\054\001\118\001\000\001\208\001\118\001\070\001\120\001\
\121\001\118\001\123\001\124\001\118\001\255\001\000\002\118\001\
\001\001\120\001\121\001\024\001\123\001\124\001\027\001\028\001\
\118\001\001\001\031\001\070\001\069\001\069\001\070\001\001\001\
\072\001\073\001\075\001\075\001\076\001\077\001\209\001\007\001\
\055\001\056\001\057\001\077\002\118\001\227\001\228\001\229\001\
\230\001\055\001\056\001\057\001\205\001\108\002\118\001\095\001\
\213\001\097\001\071\001\199\001\059\002\211\002\070\001\076\001\
\001\001\205\001\001\001\066\002\108\001\006\001\110\001\006\001\
\074\001\191\001\126\002\070\001\078\001\103\000\104\000\119\001\
\001\000\002\000\000\001\233\002\070\002\055\001\085\002\001\001\
\072\001\144\002\095\001\070\001\006\001\140\002\141\002\047\001\
\048\001\083\002\070\001\001\001\070\001\069\001\075\001\108\001\
\006\001\110\001\076\001\075\001\097\002\070\001\099\002\065\001\
\066\001\102\002\119\001\097\002\034\001\099\002\000\001\001\001\
\102\002\053\001\054\001\072\001\006\001\124\002\112\002\072\001\
\054\002\065\001\066\001\099\001\100\001\070\001\069\001\070\001\
\047\001\048\001\073\001\138\002\091\002\070\001\077\001\059\001\
\171\002\071\002\007\001\008\001\118\001\000\001\001\001\075\001\
\151\002\068\002\072\001\154\002\070\001\156\002\076\001\077\001\
\108\002\120\001\121\001\061\001\123\001\124\001\060\001\069\001\
\070\001\195\000\196\000\073\001\063\001\055\001\001\001\077\001\
\108\002\125\002\204\000\205\000\077\001\118\001\101\001\118\001\
\211\002\092\001\093\001\069\001\070\001\175\002\034\001\073\001\
\178\002\075\001\076\001\077\001\058\002\076\001\077\001\185\002\
\097\002\069\001\099\002\185\002\118\001\102\002\233\002\076\001\
\077\001\076\001\237\002\076\001\144\002\097\002\077\001\099\002\
\118\001\069\001\102\002\246\002\055\001\150\002\074\001\075\001\
\076\001\077\001\069\001\111\002\227\002\197\000\198\000\199\000\
\200\000\201\000\202\000\000\001\118\001\077\001\099\001\100\001\
\069\001\070\001\076\001\077\001\073\001\244\002\188\002\189\002\
\077\001\135\001\136\001\199\002\167\002\150\002\034\001\000\001\
\140\002\141\002\077\001\063\001\064\001\113\001\137\001\138\001\
\250\002\069\001\150\002\143\001\144\001\034\001\074\001\075\001\
\076\001\077\001\001\001\079\001\138\002\072\001\162\002\024\001\
\142\002\001\001\027\001\028\001\000\001\001\001\031\001\024\001\
\001\001\034\001\027\001\028\001\154\002\024\001\031\001\001\001\
\027\001\028\001\006\001\007\001\031\001\185\002\253\002\001\001\
\069\001\008\001\009\001\072\001\072\001\113\001\075\001\076\001\
\077\001\072\001\044\003\230\002\200\002\014\001\015\001\024\001\
\072\001\072\001\027\001\028\001\069\001\070\001\031\001\072\001\
\073\001\069\001\075\001\076\001\077\001\064\001\069\001\078\003\
\070\001\032\003\069\001\055\001\071\001\000\001\070\001\074\001\
\075\001\076\001\077\001\078\001\079\001\001\001\095\001\070\001\
\097\001\069\001\070\001\070\001\060\001\073\001\095\001\075\001\
\076\001\077\001\069\001\108\001\095\001\110\001\059\001\037\003\
\038\003\039\003\069\001\108\001\061\001\110\001\119\001\034\001\
\063\001\108\001\069\001\110\001\004\001\077\001\119\001\004\001\
\045\001\046\001\069\001\004\001\119\001\059\003\095\001\069\001\
\097\001\069\001\071\001\113\001\074\001\075\001\076\001\071\001\
\071\001\001\001\118\001\108\001\105\001\110\001\067\001\068\001\
\076\001\070\001\069\001\069\001\073\001\072\001\119\001\071\001\
\075\001\076\001\077\001\069\001\132\001\133\001\134\001\135\001\
\136\001\137\001\138\001\139\001\140\001\141\001\142\001\143\001\
\144\001\145\001\146\001\147\001\148\001\149\001\049\001\050\001\
\051\001\052\001\000\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\069\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\077\001\076\001\014\000\049\001\
\050\001\051\001\052\001\077\001\077\001\077\001\022\000\071\001\
\071\001\025\000\026\000\072\001\072\001\071\001\030\000\053\001\
\054\001\055\001\069\001\076\001\058\001\059\001\077\001\069\001\
\062\001\063\001\069\001\069\001\001\001\067\001\068\001\070\001\
\070\001\071\001\072\001\051\000\069\001\053\000\076\001\069\001\
\074\001\001\001\080\001\081\001\082\001\083\001\084\001\085\001\
\086\001\087\001\088\001\089\001\090\001\091\001\075\001\001\001\
\070\001\095\001\096\001\097\001\098\001\099\001\100\001\076\001\
\102\001\077\001\002\002\105\001\106\001\107\001\108\001\109\001\
\110\001\111\001\112\001\073\001\071\001\071\001\116\001\117\001\
\077\001\119\001\075\001\071\001\122\001\076\001\071\001\125\001\
\126\001\000\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\071\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\071\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\139\001\
\140\001\141\001\142\001\069\001\069\001\069\001\053\001\054\001\
\055\001\077\001\077\001\058\001\059\001\069\001\077\001\062\001\
\063\001\077\001\069\001\074\001\067\001\068\001\075\001\070\001\
\071\001\072\001\034\001\077\001\072\001\076\001\072\001\072\001\
\077\001\080\001\081\001\082\001\083\001\084\001\085\001\086\001\
\087\001\088\001\089\001\090\001\091\001\075\001\071\001\069\001\
\095\001\096\001\097\001\098\001\099\001\100\001\069\001\102\001\
\069\001\075\001\070\001\106\001\107\001\108\001\109\001\110\001\
\111\001\112\001\076\001\076\001\070\001\116\001\117\001\075\001\
\119\001\070\001\070\001\122\001\148\002\070\001\125\001\126\001\
\000\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\076\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\121\001\122\001\123\001\124\001\125\001\126\001\
\127\001\128\001\129\001\130\001\131\001\010\001\011\001\012\001\
\013\001\071\001\077\001\076\001\076\001\053\001\054\001\055\001\
\069\001\071\001\058\001\059\001\069\001\069\001\062\001\063\001\
\069\001\069\001\069\001\067\001\068\001\071\001\070\001\071\001\
\072\001\071\001\075\001\074\001\076\001\087\001\070\001\076\001\
\080\001\081\001\082\001\083\001\084\001\085\001\086\001\087\001\
\088\001\089\001\090\001\091\001\076\001\001\001\001\001\095\001\
\096\001\097\001\098\001\099\001\100\001\001\001\102\001\069\001\
\074\001\069\001\106\001\107\001\108\001\109\001\110\001\111\001\
\112\001\071\001\069\001\069\001\116\001\117\001\071\001\119\001\
\071\001\094\001\122\001\007\001\076\001\125\001\126\001\000\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\076\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\077\001\077\001\077\001\001\001\074\001\076\001\069\001\
\069\001\075\001\001\001\076\001\075\001\069\001\073\001\069\001\
\069\001\075\001\000\001\076\001\053\001\054\001\055\001\074\001\
\076\001\058\001\059\001\077\001\076\001\062\001\063\001\076\001\
\070\001\075\001\067\001\068\001\077\001\070\001\069\001\072\001\
\069\001\069\001\072\001\076\001\076\001\069\001\069\001\080\001\
\081\001\082\001\083\001\084\001\085\001\086\001\087\001\088\001\
\089\001\090\001\091\001\071\001\071\001\069\001\095\001\096\001\
\097\001\098\001\099\001\100\001\069\001\102\001\073\001\071\001\
\071\001\106\001\107\001\108\001\109\001\110\001\111\001\112\001\
\069\001\075\001\074\001\116\001\117\001\071\001\119\001\071\001\
\076\001\122\001\071\001\076\001\125\001\126\001\000\001\001\001\
\002\001\003\001\004\001\005\001\070\001\007\001\008\001\076\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\076\001\059\001\060\001\
\061\001\069\001\063\001\064\001\065\001\066\001\032\001\033\001\
\069\001\069\001\069\001\069\001\073\001\074\001\075\001\076\001\
\077\001\069\001\079\001\002\000\130\000\220\002\226\002\054\001\
\074\002\200\001\031\001\053\001\054\001\055\001\075\002\125\002\
\058\001\059\001\142\000\145\001\062\001\063\001\148\002\146\001\
\112\002\067\001\068\001\237\002\070\001\071\001\072\001\147\001\
\035\003\148\001\076\001\149\001\113\001\216\001\080\001\081\001\
\082\001\083\001\084\001\085\001\086\001\087\001\088\001\089\001\
\090\001\091\001\199\002\074\000\162\000\016\001\018\001\097\001\
\017\001\099\001\100\001\019\001\102\001\020\001\068\003\087\003\
\106\001\107\001\066\003\109\001\255\255\000\001\001\001\002\001\
\003\001\004\001\005\001\117\001\007\001\008\001\047\001\048\001\
\122\001\255\255\255\255\125\001\126\001\255\255\255\255\255\255\
\255\255\255\255\059\001\060\001\061\001\255\255\063\001\064\001\
\255\255\255\255\255\255\255\255\069\001\032\001\033\001\255\255\
\255\255\074\001\075\001\076\001\077\001\255\255\079\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\053\001\054\001\055\001\255\255\255\255\058\001\
\059\001\255\255\255\255\062\001\063\001\255\255\255\255\255\255\
\067\001\068\001\255\255\070\001\255\255\072\001\255\255\255\255\
\113\001\076\001\255\255\255\255\255\255\080\001\081\001\082\001\
\083\001\084\001\085\001\086\001\087\001\088\001\089\001\090\001\
\091\001\255\255\255\255\255\255\255\255\255\255\097\001\255\255\
\099\001\100\001\255\255\102\001\255\255\255\255\255\255\106\001\
\107\001\255\255\109\001\255\255\000\001\001\001\002\001\003\001\
\004\001\005\001\117\001\007\001\008\001\047\001\048\001\122\001\
\255\255\255\255\125\001\126\001\255\255\255\255\255\255\255\255\
\255\255\059\001\060\001\061\001\255\255\063\001\064\001\255\255\
\255\255\255\255\255\255\069\001\032\001\033\001\255\255\255\255\
\074\001\075\001\076\001\077\001\255\255\079\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\053\001\054\001\055\001\255\255\255\255\058\001\059\001\
\255\255\255\255\062\001\063\001\255\255\255\255\255\255\067\001\
\068\001\255\255\070\001\255\255\072\001\255\255\255\255\113\001\
\076\001\255\255\255\255\255\255\080\001\081\001\082\001\083\001\
\084\001\085\001\086\001\087\001\088\001\089\001\090\001\091\001\
\255\255\255\255\255\255\255\255\255\255\097\001\255\255\099\001\
\100\001\255\255\102\001\255\255\255\255\255\255\106\001\107\001\
\255\255\109\001\255\255\255\255\255\255\255\255\255\255\255\255\
\024\001\117\001\255\255\027\001\028\001\255\255\122\001\031\001\
\255\255\125\001\126\001\000\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\069\001\255\255\071\001\
\255\255\255\255\074\001\075\001\076\001\077\001\078\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\053\001\054\001\055\001\255\255\255\255\058\001\059\001\095\001\
\255\255\062\001\063\001\255\255\063\001\064\001\067\001\068\001\
\255\255\070\001\069\001\072\001\108\001\255\255\110\001\074\001\
\075\001\076\001\077\001\255\255\079\001\255\255\255\255\119\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\095\001\096\001\255\255\098\001\099\001\100\001\
\255\255\102\001\255\255\255\255\255\255\106\001\107\001\108\001\
\255\255\110\001\255\255\255\255\255\255\255\255\113\001\116\001\
\117\001\255\255\119\001\000\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\064\001\255\255\255\255\
\255\255\255\255\069\001\255\255\255\255\255\255\255\255\074\001\
\075\001\076\001\077\001\255\255\079\001\255\255\255\255\255\255\
\053\001\054\001\055\001\255\255\255\255\058\001\059\001\255\255\
\255\255\062\001\063\001\255\255\255\255\255\255\067\001\068\001\
\255\255\070\001\255\255\255\255\255\255\024\001\255\255\255\255\
\027\001\028\001\255\255\255\255\031\001\255\255\113\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\095\001\096\001\255\255\098\001\099\001\100\001\
\255\255\102\001\255\255\255\255\255\255\106\001\107\001\108\001\
\255\255\110\001\255\255\000\001\001\001\255\255\255\255\116\001\
\117\001\006\001\119\001\070\001\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\255\255\095\001\059\001\060\001\061\001\
\255\255\063\001\064\001\255\255\255\255\255\255\255\255\069\001\
\255\255\108\001\255\255\110\001\074\001\075\001\076\001\077\001\
\064\001\079\001\055\001\255\255\119\001\069\001\255\255\255\255\
\255\255\255\255\074\001\075\001\076\001\077\001\255\255\079\001\
\069\001\070\001\255\255\072\001\073\001\255\255\075\001\076\001\
\077\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\113\001\255\255\255\255\255\255\255\255\
\255\255\255\255\095\001\096\001\255\255\098\001\255\255\255\255\
\255\255\113\001\255\255\255\255\255\255\255\255\255\255\108\001\
\255\255\110\001\000\001\001\001\255\255\255\255\255\255\116\001\
\006\001\118\001\119\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\255\255\
\059\001\060\001\061\001\255\255\063\001\064\001\065\001\066\001\
\255\255\055\001\069\001\255\255\255\255\255\255\073\001\074\001\
\255\255\076\001\077\001\255\255\079\001\255\255\255\255\069\001\
\070\001\255\255\072\001\073\001\255\255\075\001\076\001\077\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\059\001\060\001\061\001\255\255\063\001\
\064\001\095\001\096\001\255\255\098\001\069\001\113\001\255\255\
\255\255\255\255\074\001\075\001\076\001\077\001\108\001\079\001\
\110\001\000\001\001\001\255\255\255\255\255\255\116\001\006\001\
\118\001\119\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\113\001\255\255\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\255\255\059\001\
\060\001\061\001\255\255\063\001\064\001\065\001\066\001\255\255\
\055\001\069\001\255\255\255\255\255\255\255\255\074\001\075\001\
\076\001\077\001\255\255\079\001\255\255\255\255\069\001\070\001\
\255\255\072\001\073\001\255\255\075\001\076\001\077\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\095\001\096\001\255\255\098\001\024\001\113\001\255\255\027\001\
\028\001\255\255\255\255\031\001\255\255\108\001\255\255\110\001\
\000\001\001\001\255\255\255\255\255\255\116\001\006\001\118\001\
\119\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\060\001\061\001\070\001\063\001\064\001\073\001\255\255\255\255\
\255\255\069\001\255\255\255\255\255\255\255\255\074\001\075\001\
\076\001\077\001\255\255\079\001\255\255\255\255\255\255\055\001\
\255\255\255\255\255\255\095\001\255\255\097\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\069\001\070\001\255\255\
\108\001\073\001\110\001\075\001\076\001\077\001\255\255\255\255\
\255\255\255\255\255\255\119\001\255\255\113\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\095\001\
\096\001\024\001\098\001\255\255\027\001\028\001\255\255\255\255\
\031\001\255\255\255\255\255\255\108\001\255\255\110\001\000\001\
\255\255\255\255\255\255\255\255\116\001\006\001\118\001\119\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\070\001\
\255\255\255\255\073\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\255\255\059\001\
\060\001\061\001\255\255\063\001\064\001\065\001\066\001\255\255\
\095\001\069\001\097\001\255\255\255\255\255\255\074\001\075\001\
\076\001\077\001\255\255\079\001\255\255\108\001\255\255\110\001\
\255\255\255\255\255\255\076\001\255\255\255\255\255\255\255\255\
\119\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\095\001\096\001\
\255\255\098\001\255\255\255\255\255\255\113\001\255\255\255\255\
\255\255\255\255\255\255\108\001\255\255\110\001\111\001\112\001\
\255\255\255\255\255\255\116\001\255\255\255\255\119\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\053\001\054\001\055\001\255\255\255\255\
\058\001\059\001\255\255\255\255\062\001\063\001\001\001\255\255\
\255\255\067\001\068\001\006\001\070\001\255\255\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\095\001\096\001\255\255\
\098\001\099\001\100\001\255\255\102\001\255\255\255\255\255\255\
\106\001\107\001\108\001\255\255\110\001\255\255\255\255\255\255\
\255\255\255\255\116\001\117\001\255\255\119\001\255\255\255\255\
\255\255\255\255\255\255\001\001\255\255\255\255\255\255\255\255\
\006\001\255\255\255\255\009\001\010\001\011\001\012\001\013\001\
\014\001\076\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\255\255\255\255\095\001\096\001\097\001\098\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\108\001\255\255\110\001\111\001\112\001\255\255\114\001\
\115\001\116\001\255\255\255\255\119\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\095\001\096\001\097\001\098\001\032\001\033\001\034\001\
\255\255\255\255\255\255\255\255\255\255\255\255\108\001\255\255\
\110\001\111\001\112\001\255\255\114\001\115\001\116\001\255\255\
\255\255\119\001\053\001\054\001\055\001\255\255\255\255\058\001\
\059\001\255\255\255\255\062\001\063\001\255\255\255\255\255\255\
\067\001\068\001\069\001\070\001\255\255\072\001\073\001\074\001\
\075\001\076\001\077\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\099\001\100\001\255\255\102\001\255\255\255\255\255\255\106\001\
\107\001\255\255\032\001\033\001\255\255\255\255\255\255\255\255\
\255\255\255\255\117\001\118\001\255\255\255\255\255\255\255\255\
\046\001\255\255\255\255\255\255\255\255\255\255\255\255\053\001\
\054\001\055\001\255\255\255\255\058\001\059\001\255\255\255\255\
\062\001\063\001\255\255\255\255\255\255\067\001\068\001\255\255\
\070\001\255\255\072\001\073\001\255\255\255\255\000\001\001\001\
\002\001\003\001\004\001\005\001\255\255\007\001\008\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\099\001\100\001\255\255\
\102\001\255\255\255\255\255\255\106\001\107\001\032\001\033\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\117\001\
\118\001\024\001\255\255\255\255\027\001\028\001\255\255\255\255\
\031\001\255\255\255\255\053\001\054\001\055\001\255\255\255\255\
\058\001\059\001\255\255\255\255\062\001\063\001\255\255\255\255\
\255\255\067\001\068\001\255\255\070\001\255\255\255\255\255\255\
\255\255\255\255\076\001\000\001\001\001\002\001\003\001\004\001\
\005\001\064\001\007\001\008\001\255\255\255\255\069\001\255\255\
\071\001\255\255\255\255\074\001\075\001\076\001\077\001\078\001\
\079\001\099\001\100\001\255\255\102\001\255\255\255\255\255\255\
\106\001\107\001\255\255\032\001\033\001\255\255\255\255\255\255\
\095\001\255\255\255\255\117\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\108\001\255\255\110\001\
\053\001\054\001\055\001\255\255\255\255\058\001\059\001\255\255\
\119\001\062\001\063\001\255\255\255\255\255\255\067\001\068\001\
\255\255\070\001\255\255\255\255\255\255\074\001\255\255\000\001\
\001\001\002\001\003\001\004\001\005\001\255\255\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\099\001\100\001\
\255\255\102\001\255\255\255\255\255\255\106\001\107\001\032\001\
\033\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\117\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\053\001\054\001\055\001\255\255\
\255\255\058\001\059\001\255\255\255\255\062\001\063\001\255\255\
\255\255\255\255\067\001\068\001\255\255\070\001\000\001\001\001\
\002\001\003\001\004\001\005\001\255\255\007\001\008\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\001\001\001\002\001\003\001\004\001\005\001\255\255\
\007\001\008\001\099\001\100\001\255\255\102\001\032\001\033\001\
\255\255\106\001\107\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\117\001\255\255\255\255\255\255\
\255\255\032\001\033\001\053\001\054\001\055\001\255\255\255\255\
\058\001\059\001\255\255\255\255\062\001\063\001\255\255\255\255\
\255\255\067\001\068\001\255\255\070\001\255\255\053\001\054\001\
\055\001\255\255\255\255\058\001\059\001\255\255\255\255\062\001\
\063\001\255\255\255\255\255\255\067\001\068\001\255\255\070\001\
\000\001\001\001\002\001\003\001\004\001\005\001\255\255\007\001\
\008\001\099\001\100\001\255\255\102\001\255\255\255\255\255\255\
\106\001\107\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\117\001\099\001\100\001\255\255\102\001\
\032\001\033\001\255\255\106\001\107\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\117\001\255\255\
\255\255\255\255\255\255\255\255\255\255\053\001\054\001\055\001\
\255\255\255\255\058\001\059\001\255\255\255\255\062\001\063\001\
\255\255\255\255\255\255\067\001\068\001\255\255\070\001\000\001\
\001\001\002\001\003\001\004\001\005\001\255\255\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\099\001\100\001\255\255\102\001\032\001\
\033\001\255\255\106\001\107\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\117\001\255\255\255\255\
\255\255\255\255\255\255\255\255\053\001\054\001\055\001\255\255\
\255\255\058\001\059\001\255\255\255\255\062\001\063\001\255\255\
\255\255\255\255\067\001\068\001\255\255\070\001\255\255\001\001\
\002\001\003\001\004\001\005\001\255\255\007\001\008\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\099\001\100\001\255\255\102\001\032\001\033\001\
\034\001\106\001\107\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\117\001\255\255\255\255\255\255\
\255\255\255\255\255\255\053\001\054\001\055\001\255\255\255\255\
\058\001\059\001\255\255\255\255\062\001\063\001\255\255\255\255\
\255\255\067\001\068\001\255\255\070\001\255\255\072\001\001\001\
\002\001\003\001\004\001\005\001\255\255\007\001\008\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\099\001\100\001\255\255\102\001\255\255\032\001\033\001\
\106\001\107\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\117\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\053\001\054\001\055\001\255\255\255\255\
\058\001\059\001\255\255\255\255\062\001\063\001\255\255\255\255\
\255\255\067\001\068\001\255\255\070\001\255\255\072\001\001\001\
\002\001\003\001\004\001\005\001\255\255\007\001\008\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\099\001\100\001\255\255\102\001\255\255\032\001\033\001\
\106\001\107\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\117\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\053\001\054\001\055\001\255\255\255\255\
\058\001\059\001\255\255\255\255\062\001\063\001\255\255\255\255\
\255\255\067\001\068\001\255\255\070\001\255\255\072\001\001\001\
\002\001\003\001\004\001\005\001\255\255\007\001\008\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\099\001\100\001\255\255\102\001\255\255\032\001\033\001\
\106\001\107\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\117\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\053\001\054\001\055\001\255\255\255\255\
\058\001\059\001\255\255\255\255\062\001\063\001\255\255\255\255\
\255\255\067\001\068\001\255\255\070\001\255\255\072\001\001\001\
\002\001\003\001\004\001\005\001\255\255\007\001\008\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\099\001\100\001\255\255\102\001\255\255\032\001\033\001\
\106\001\107\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\117\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\053\001\054\001\055\001\255\255\255\255\
\058\001\059\001\255\255\255\255\062\001\063\001\255\255\255\255\
\255\255\067\001\068\001\255\255\070\001\255\255\001\001\002\001\
\003\001\004\001\005\001\255\255\007\001\008\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\255\255\007\001\
\008\001\099\001\100\001\255\255\102\001\032\001\033\001\255\255\
\106\001\107\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\117\001\255\255\255\255\255\255\255\255\
\032\001\033\001\053\001\054\001\055\001\255\255\255\255\058\001\
\059\001\255\255\255\255\062\001\063\001\255\255\255\255\255\255\
\067\001\068\001\255\255\070\001\255\255\053\001\054\001\055\001\
\255\255\255\255\058\001\059\001\255\255\255\255\062\001\063\001\
\255\255\255\255\255\255\067\001\068\001\255\255\070\001\255\255\
\001\001\002\001\003\001\004\001\005\001\255\255\007\001\008\001\
\099\001\100\001\255\255\102\001\255\255\255\255\255\255\106\001\
\107\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\117\001\099\001\100\001\255\255\102\001\032\001\
\033\001\255\255\106\001\107\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\117\001\255\255\255\255\
\255\255\255\255\255\255\255\255\053\001\054\001\055\001\255\255\
\255\255\058\001\059\001\255\255\255\255\062\001\063\001\255\255\
\255\255\255\255\067\001\068\001\255\255\070\001\255\255\001\001\
\002\001\003\001\004\001\005\001\255\255\007\001\008\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\255\255\
\007\001\008\001\099\001\100\001\255\255\102\001\032\001\033\001\
\255\255\106\001\107\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\117\001\255\255\255\255\255\255\
\255\255\032\001\033\001\053\001\054\001\055\001\255\255\255\255\
\058\001\059\001\255\255\255\255\062\001\063\001\255\255\255\255\
\255\255\067\001\068\001\255\255\070\001\255\255\053\001\054\001\
\055\001\255\255\060\001\058\001\059\001\063\001\064\001\062\001\
\063\001\255\255\255\255\069\001\067\001\068\001\255\255\070\001\
\074\001\075\001\076\001\077\001\255\255\079\001\255\255\255\255\
\255\255\099\001\100\001\255\255\102\001\255\255\255\255\255\255\
\106\001\107\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\117\001\099\001\100\001\255\255\102\001\
\255\255\255\255\255\255\106\001\107\001\006\001\255\255\113\001\
\009\001\010\001\011\001\012\001\013\001\014\001\117\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\255\255\
\255\255\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\255\255\059\001\060\001\061\001\255\255\063\001\064\001\
\065\001\066\001\067\001\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\077\001\078\001\079\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\060\001\061\001\255\255\063\001\064\001\095\001\096\001\
\255\255\098\001\069\001\255\255\255\255\255\255\255\255\074\001\
\075\001\076\001\077\001\108\001\079\001\110\001\255\255\255\255\
\113\001\255\255\255\255\116\001\006\001\007\001\119\001\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\113\001\006\001\
\255\255\255\255\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\255\255\255\255\255\255\255\255\006\001\255\255\255\255\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\255\255\
\255\255\255\255\255\255\255\255\255\255\095\001\096\001\070\001\
\098\001\099\001\100\001\255\255\255\255\255\255\255\255\078\001\
\255\255\255\255\108\001\255\255\110\001\255\255\255\255\255\255\
\255\255\255\255\116\001\255\255\255\255\119\001\255\255\255\255\
\095\001\096\001\255\255\098\001\069\001\070\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\108\001\255\255\110\001\
\255\255\255\255\255\255\255\255\255\255\116\001\255\255\255\255\
\119\001\060\001\255\255\255\255\063\001\064\001\095\001\096\001\
\255\255\098\001\069\001\255\255\255\255\255\255\255\255\074\001\
\075\001\076\001\077\001\108\001\079\001\110\001\255\255\255\255\
\255\255\255\255\255\255\116\001\006\001\255\255\119\001\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\113\001\006\001\
\255\255\255\255\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\255\255\255\255\006\001\255\255\255\255\009\001\010\001\
\011\001\012\001\013\001\014\001\070\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\095\001\096\001\255\255\
\098\001\072\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\108\001\255\255\110\001\255\255\255\255\255\255\
\255\255\255\255\116\001\255\255\255\255\119\001\255\255\255\255\
\095\001\096\001\255\255\098\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\078\001\255\255\108\001\255\255\110\001\
\255\255\255\255\255\255\255\255\255\255\116\001\255\255\255\255\
\119\001\255\255\255\255\255\255\095\001\096\001\255\255\098\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\108\001\255\255\110\001\255\255\255\255\255\255\255\255\
\255\255\116\001\006\001\255\255\119\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\255\255\255\255\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\255\255\255\255\255\255\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\255\255\059\001\060\001\061\001\255\255\
\063\001\064\001\065\001\066\001\255\255\255\255\069\001\255\255\
\255\255\255\255\255\255\074\001\075\001\076\001\077\001\255\255\
\079\001\255\255\255\255\095\001\096\001\255\255\098\001\255\255\
\255\255\255\255\255\255\255\255\255\255\000\001\001\001\255\255\
\108\001\004\001\110\001\006\001\007\001\255\255\255\255\255\255\
\116\001\255\255\255\255\119\001\095\001\096\001\255\255\098\001\
\000\001\001\001\113\001\255\255\004\001\024\001\006\001\007\001\
\027\001\108\001\255\255\110\001\255\255\032\001\033\001\255\255\
\255\255\116\001\255\255\255\255\119\001\255\255\255\255\255\255\
\024\001\255\255\255\255\027\001\255\255\255\255\255\255\255\255\
\032\001\033\001\053\001\054\001\055\001\255\255\255\255\058\001\
\059\001\255\255\255\255\062\001\255\255\255\255\255\255\255\255\
\255\255\255\255\069\001\070\001\255\255\053\001\054\001\055\001\
\255\255\255\255\058\001\059\001\255\255\255\255\062\001\255\255\
\255\255\000\001\001\001\086\001\255\255\004\001\070\001\006\001\
\007\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\099\001\100\001\255\255\255\255\000\001\001\001\086\001\255\255\
\004\001\024\001\006\001\007\001\027\001\255\255\255\255\255\255\
\255\255\032\001\033\001\099\001\100\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\255\255\027\001\
\255\255\255\255\255\255\255\255\032\001\033\001\053\001\054\001\
\055\001\255\255\255\255\058\001\059\001\255\255\255\255\062\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\070\001\
\255\255\053\001\054\001\055\001\255\255\255\255\058\001\059\001\
\255\255\255\255\062\001\255\255\255\255\255\255\001\001\086\001\
\255\255\004\001\070\001\006\001\007\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\099\001\100\001\255\255\255\255\
\255\255\255\255\086\001\255\255\255\255\024\001\255\255\255\255\
\027\001\255\255\255\255\255\255\255\255\032\001\033\001\099\001\
\100\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\053\001\054\001\055\001\255\255\255\255\058\001\
\059\001\255\255\255\255\062\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\070\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\086\001\255\255\255\255\255\255\255\255\
\024\001\255\255\255\255\027\001\028\001\255\255\255\255\031\001\
\099\001\100\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\255\255\059\001\060\001\061\001\255\255\063\001\
\064\001\065\001\066\001\067\001\068\001\069\001\070\001\071\001\
\255\255\073\001\074\001\075\001\076\001\077\001\078\001\079\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\095\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\108\001\255\255\110\001\024\001\
\255\255\113\001\027\001\028\001\255\255\255\255\031\001\119\001\
\255\255\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\255\255\255\255\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\255\255\059\001\060\001\061\001\255\255\063\001\064\001\
\065\001\066\001\255\255\255\255\069\001\255\255\071\001\255\255\
\255\255\074\001\075\001\076\001\077\001\078\001\079\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\095\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\108\001\255\255\110\001\024\001\255\255\
\113\001\027\001\028\001\255\255\255\255\031\001\119\001\255\255\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\255\255\255\255\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\255\255\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\255\255\255\255\069\001\255\255\071\001\255\255\255\255\
\074\001\075\001\076\001\077\001\078\001\079\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\095\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\108\001\255\255\110\001\024\001\255\255\113\001\
\027\001\028\001\255\255\255\255\031\001\119\001\255\255\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\255\255\255\255\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\255\255\
\059\001\060\001\061\001\255\255\063\001\064\001\065\001\066\001\
\255\255\255\255\069\001\255\255\071\001\255\255\255\255\074\001\
\075\001\076\001\077\001\078\001\079\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\095\001\255\255\024\001\255\255\
\255\255\027\001\028\001\255\255\255\255\031\001\255\255\255\255\
\255\255\108\001\255\255\110\001\255\255\255\255\113\001\255\255\
\255\255\255\255\255\255\255\255\119\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\255\255\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\255\255\255\255\069\001\255\255\071\001\255\255\255\255\
\074\001\075\001\076\001\077\001\078\001\079\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\095\001\255\255\024\001\
\255\255\255\255\027\001\028\001\255\255\255\255\031\001\255\255\
\255\255\255\255\108\001\255\255\110\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\119\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\255\255\255\255\
\255\255\255\255\059\001\060\001\061\001\255\255\063\001\064\001\
\065\001\066\001\255\255\255\255\069\001\255\255\071\001\255\255\
\255\255\074\001\075\001\076\001\077\001\078\001\079\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\095\001\255\255\
\024\001\255\255\255\255\027\001\028\001\255\255\255\255\031\001\
\255\255\255\255\255\255\108\001\255\255\110\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\119\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\255\255\
\255\255\255\255\255\255\059\001\060\001\061\001\255\255\063\001\
\064\001\065\001\066\001\255\255\255\255\069\001\255\255\071\001\
\255\255\255\255\074\001\075\001\076\001\077\001\078\001\079\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\095\001\
\255\255\024\001\255\255\255\255\027\001\028\001\255\255\255\255\
\031\001\255\255\255\255\255\255\108\001\255\255\110\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\119\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\255\255\255\255\255\255\255\255\059\001\060\001\061\001\255\255\
\063\001\064\001\065\001\066\001\255\255\255\255\069\001\255\255\
\071\001\255\255\255\255\074\001\075\001\076\001\077\001\078\001\
\079\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\024\001\255\255\255\255\027\001\028\001\255\255\
\095\001\031\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\108\001\255\255\110\001\
\255\255\047\001\048\001\049\001\050\001\051\001\052\001\255\255\
\119\001\255\255\255\255\255\255\255\255\059\001\060\001\061\001\
\255\255\063\001\064\001\065\001\066\001\255\255\255\255\069\001\
\255\255\071\001\255\255\255\255\074\001\075\001\076\001\077\001\
\078\001\079\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\024\001\255\255\255\255\027\001\028\001\
\255\255\095\001\031\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\108\001\255\255\
\110\001\255\255\047\001\048\001\049\001\050\001\051\001\052\001\
\255\255\119\001\255\255\255\255\255\255\255\255\059\001\060\001\
\061\001\255\255\063\001\064\001\065\001\066\001\255\255\255\255\
\069\001\255\255\071\001\255\255\255\255\074\001\075\001\076\001\
\077\001\078\001\079\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\255\255\027\001\
\028\001\255\255\095\001\031\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\108\001\
\255\255\110\001\255\255\047\001\048\001\049\001\050\001\051\001\
\052\001\255\255\119\001\255\255\255\255\255\255\255\255\059\001\
\060\001\061\001\255\255\063\001\064\001\065\001\066\001\255\255\
\255\255\069\001\255\255\071\001\255\255\255\255\074\001\075\001\
\076\001\077\001\078\001\079\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\024\001\255\255\255\255\
\027\001\028\001\255\255\095\001\031\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\108\001\255\255\110\001\255\255\047\001\048\001\049\001\050\001\
\051\001\052\001\255\255\119\001\255\255\255\255\255\255\255\255\
\059\001\060\001\061\001\255\255\063\001\064\001\255\255\255\255\
\255\255\255\255\069\001\255\255\071\001\255\255\255\255\074\001\
\075\001\076\001\077\001\078\001\079\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\255\255\
\255\255\027\001\028\001\255\255\095\001\031\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\108\001\255\255\110\001\255\255\047\001\048\001\049\001\
\050\001\051\001\052\001\255\255\119\001\255\255\255\255\255\255\
\255\255\059\001\060\001\061\001\255\255\063\001\064\001\255\255\
\255\255\255\255\255\255\069\001\255\255\071\001\255\255\255\255\
\074\001\075\001\076\001\077\001\078\001\079\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\024\001\
\255\255\255\255\027\001\028\001\255\255\095\001\031\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\108\001\255\255\110\001\255\255\047\001\048\001\
\049\001\050\001\051\001\052\001\255\255\119\001\255\255\255\255\
\255\255\255\255\059\001\060\001\061\001\255\255\063\001\064\001\
\255\255\255\255\255\255\255\255\069\001\255\255\071\001\255\255\
\255\255\074\001\075\001\076\001\077\001\078\001\079\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\024\001\255\255\255\255\027\001\028\001\255\255\095\001\031\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\108\001\255\255\110\001\255\255\047\001\
\048\001\049\001\050\001\051\001\052\001\255\255\119\001\255\255\
\255\255\255\255\255\255\059\001\060\001\061\001\255\255\063\001\
\064\001\255\255\255\255\255\255\255\255\069\001\255\255\071\001\
\255\255\255\255\074\001\075\001\076\001\077\001\078\001\079\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\024\001\255\255\255\255\027\001\028\001\255\255\095\001\
\031\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\108\001\255\255\110\001\255\255\
\047\001\048\001\049\001\050\001\051\001\052\001\255\255\119\001\
\255\255\255\255\255\255\255\255\059\001\060\001\061\001\255\255\
\063\001\064\001\255\255\255\255\255\255\255\255\069\001\255\255\
\071\001\255\255\255\255\074\001\075\001\076\001\077\001\078\001\
\079\001\255\255\024\001\255\255\255\255\027\001\028\001\255\255\
\255\255\031\001\255\255\255\255\255\255\255\255\255\255\255\255\
\095\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\047\001\048\001\255\255\255\255\108\001\255\255\110\001\
\255\255\255\255\255\255\255\255\255\255\059\001\060\001\061\001\
\119\001\063\001\064\001\255\255\255\255\255\255\255\255\069\001\
\255\255\071\001\255\255\255\255\074\001\075\001\076\001\077\001\
\078\001\079\001\255\255\024\001\255\255\255\255\027\001\028\001\
\255\255\255\255\031\001\255\255\255\255\255\255\255\255\255\255\
\255\255\095\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\047\001\048\001\255\255\255\255\108\001\255\255\
\110\001\255\255\255\255\255\255\255\255\255\255\059\001\060\001\
\061\001\119\001\063\001\064\001\255\255\255\255\255\255\255\255\
\069\001\255\255\071\001\255\255\255\255\074\001\075\001\076\001\
\077\001\078\001\079\001\255\255\024\001\255\255\255\255\027\001\
\028\001\255\255\255\255\031\001\255\255\255\255\255\255\255\255\
\255\255\255\255\095\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\047\001\048\001\255\255\255\255\108\001\
\255\255\110\001\255\255\255\255\255\255\255\255\255\255\059\001\
\060\001\061\001\119\001\063\001\064\001\255\255\255\255\255\255\
\255\255\069\001\255\255\071\001\255\255\255\255\074\001\075\001\
\076\001\077\001\078\001\079\001\255\255\024\001\255\255\255\255\
\027\001\028\001\255\255\255\255\031\001\255\255\255\255\255\255\
\255\255\255\255\255\255\095\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\108\001\255\255\110\001\255\255\255\255\255\255\255\255\255\255\
\059\001\060\001\061\001\119\001\063\001\064\001\255\255\255\255\
\255\255\255\255\069\001\255\255\071\001\255\255\255\255\074\001\
\075\001\076\001\077\001\078\001\079\001\255\255\024\001\255\255\
\255\255\027\001\028\001\255\255\255\255\031\001\255\255\255\255\
\255\255\255\255\255\255\255\255\095\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\108\001\255\255\110\001\255\255\255\255\255\255\255\255\
\255\255\059\001\060\001\061\001\119\001\063\001\064\001\255\255\
\255\255\255\255\255\255\069\001\255\255\071\001\255\255\255\255\
\074\001\075\001\076\001\077\001\078\001\079\001\255\255\024\001\
\255\255\255\255\027\001\028\001\255\255\255\255\031\001\255\255\
\255\255\255\255\255\255\255\255\255\255\095\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\108\001\024\001\110\001\255\255\027\001\028\001\
\255\255\255\255\031\001\060\001\061\001\119\001\063\001\064\001\
\255\255\255\255\255\255\255\255\069\001\255\255\071\001\255\255\
\255\255\074\001\075\001\076\001\077\001\078\001\079\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\060\001\
\061\001\255\255\063\001\064\001\255\255\255\255\095\001\255\255\
\069\001\255\255\071\001\255\255\255\255\074\001\075\001\076\001\
\077\001\078\001\079\001\108\001\024\001\110\001\255\255\027\001\
\028\001\255\255\255\255\031\001\255\255\255\255\119\001\255\255\
\255\255\255\255\095\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\108\001\
\024\001\110\001\255\255\027\001\028\001\255\255\255\255\031\001\
\060\001\255\255\119\001\063\001\064\001\255\255\255\255\255\255\
\255\255\069\001\255\255\071\001\255\255\255\255\074\001\075\001\
\076\001\077\001\078\001\079\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\060\001\255\255\255\255\063\001\
\064\001\255\255\255\255\095\001\255\255\069\001\255\255\071\001\
\255\255\255\255\074\001\075\001\076\001\077\001\078\001\079\001\
\108\001\024\001\110\001\255\255\027\001\028\001\255\255\255\255\
\031\001\255\255\255\255\119\001\255\255\255\255\255\255\095\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\108\001\024\001\110\001\255\255\
\027\001\028\001\255\255\255\255\031\001\255\255\255\255\119\001\
\063\001\064\001\255\255\255\255\255\255\255\255\069\001\255\255\
\071\001\255\255\255\255\074\001\075\001\076\001\077\001\078\001\
\079\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\063\001\064\001\255\255\255\255\
\095\001\255\255\069\001\255\255\071\001\255\255\255\255\074\001\
\075\001\076\001\077\001\078\001\079\001\108\001\255\255\110\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\119\001\255\255\255\255\255\255\095\001\255\255\255\255\255\255\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\255\255\108\001\255\255\110\001\059\001\060\001\061\001\255\255\
\063\001\064\001\065\001\066\001\119\001\255\255\069\001\255\255\
\255\255\255\255\255\255\074\001\075\001\076\001\077\001\255\255\
\079\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\255\255\255\255\255\255\255\255\059\001\060\001\061\001\
\255\255\063\001\064\001\065\001\066\001\255\255\255\255\069\001\
\255\255\255\255\255\255\255\255\074\001\075\001\076\001\077\001\
\255\255\079\001\113\001\255\255\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\255\255\255\255\255\255\255\255\
\059\001\060\001\061\001\255\255\063\001\064\001\065\001\066\001\
\255\255\255\255\069\001\255\255\255\255\255\255\255\255\074\001\
\075\001\076\001\077\001\113\001\079\001\047\001\048\001\049\001\
\050\001\051\001\052\001\255\255\255\255\255\255\255\255\255\255\
\255\255\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\255\255\255\255\069\001\255\255\255\255\255\255\255\255\
\074\001\075\001\076\001\077\001\255\255\079\001\113\001\255\255\
\047\001\048\001\049\001\050\001\051\001\052\001\255\255\255\255\
\255\255\255\255\255\255\255\255\059\001\060\001\061\001\255\255\
\063\001\064\001\065\001\066\001\255\255\255\255\069\001\255\255\
\255\255\255\255\255\255\074\001\075\001\076\001\077\001\113\001\
\079\001\047\001\048\001\049\001\050\001\051\001\052\001\255\255\
\255\255\255\255\255\255\255\255\255\255\059\001\060\001\061\001\
\255\255\063\001\064\001\065\001\066\001\255\255\255\255\069\001\
\255\255\255\255\255\255\255\255\074\001\075\001\076\001\077\001\
\255\255\079\001\113\001\255\255\047\001\048\001\049\001\050\001\
\051\001\052\001\255\255\255\255\255\255\255\255\255\255\255\255\
\059\001\060\001\061\001\255\255\063\001\064\001\255\255\255\255\
\255\255\255\255\069\001\255\255\255\255\255\255\255\255\074\001\
\075\001\076\001\077\001\113\001\079\001\047\001\048\001\049\001\
\050\001\051\001\052\001\255\255\255\255\255\255\255\255\255\255\
\255\255\059\001\060\001\061\001\255\255\063\001\064\001\255\255\
\255\255\255\255\255\255\069\001\255\255\255\255\255\255\255\255\
\074\001\075\001\076\001\077\001\255\255\079\001\113\001\255\255\
\047\001\048\001\049\001\050\001\051\001\052\001\255\255\255\255\
\255\255\255\255\255\255\255\255\059\001\060\001\061\001\255\255\
\063\001\064\001\255\255\255\255\255\255\255\255\069\001\255\255\
\255\255\255\255\255\255\074\001\075\001\076\001\077\001\113\001\
\079\001\047\001\048\001\049\001\050\001\051\001\052\001\255\255\
\255\255\255\255\255\255\255\255\255\255\059\001\060\001\061\001\
\255\255\063\001\064\001\255\255\255\255\255\255\255\255\069\001\
\255\255\255\255\255\255\255\255\074\001\075\001\076\001\077\001\
\255\255\079\001\113\001\255\255\047\001\048\001\049\001\050\001\
\051\001\052\001\255\255\255\255\255\255\255\255\255\255\255\255\
\059\001\060\001\061\001\255\255\063\001\064\001\255\255\255\255\
\255\255\255\255\069\001\047\001\048\001\255\255\255\255\074\001\
\075\001\076\001\077\001\113\001\079\001\255\255\255\255\059\001\
\060\001\061\001\255\255\063\001\064\001\255\255\255\255\255\255\
\255\255\069\001\255\255\255\255\255\255\255\255\074\001\075\001\
\076\001\077\001\255\255\079\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\113\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\113\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\255\255\059\001\
\060\001\061\001\255\255\063\001\064\001\065\001\066\001\067\001\
\068\001\255\255\070\001\071\001\255\255\073\001\255\255\075\001\
\255\255\077\001\255\255\079\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\255\255\059\001\060\001\061\001\
\255\255\063\001\064\001\065\001\066\001\067\001\068\001\255\255\
\070\001\255\255\255\255\073\001\255\255\255\255\076\001\077\001\
\255\255\079\001"

let yynames_const = "\
  EOF\000\
  EQ\000\
  PLUS_EQ\000\
  MINUS_EQ\000\
  STAR_EQ\000\
  SLASH_EQ\000\
  PERCENT_EQ\000\
  AND_EQ\000\
  PIPE_EQ\000\
  CIRC_EQ\000\
  INF_INF_EQ\000\
  SUP_SUP_EQ\000\
  ARROW\000\
  DOT\000\
  EQ_EQ\000\
  EXCLAM_EQ\000\
  INF\000\
  SUP\000\
  INF_EQ\000\
  SUP_EQ\000\
  SLASH\000\
  PERCENT\000\
  PIPE\000\
  CIRC\000\
  PIPE_PIPE\000\
  INF_INF\000\
  SUP_SUP\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  COLON\000\
  COMMA\000\
  ELLIPSIS\000\
  QUEST\000\
  ELSE\000\
  LABEL__\000\
  BUILTIN_VA_LIST\000\
  BLOCKATTRIBUTE\000\
  PRAGMA_EOL\000\
  AT_NAME\000\
  "

let yynames_block = "\
  IDENT\000\
  CST_CHAR\000\
  CST_WCHAR\000\
  CST_INT\000\
  CST_FLOAT\000\
  NAMED_TYPE\000\
  CST_STRING\000\
  CST_WSTRING\000\
  CHAR\000\
  INT\000\
  DOUBLE\000\
  FLOAT\000\
  VOID\000\
  INT64\000\
  INT32\000\
  ENUM\000\
  STRUCT\000\
  TYPEDEF\000\
  UNION\000\
  SIGNED\000\
  UNSIGNED\000\
  LONG\000\
  SHORT\000\
  VOLATILE\000\
  EXTERN\000\
  STATIC\000\
  CONST\000\
  RESTRICT\000\
  AUTO\000\
  REGISTER\000\
  THREAD\000\
  SIZEOF\000\
  ALIGNOF\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  TILDE\000\
  AND\000\
  EXCLAM\000\
  AND_AND\000\
  PLUS_PLUS\000\
  MINUS_MINUS\000\
  LPAREN\000\
  RBRACE\000\
  LBRACE\000\
  SEMICOLON\000\
  BREAK\000\
  CONTINUE\000\
  GOTO\000\
  RETURN\000\
  SWITCH\000\
  CASE\000\
  DEFAULT\000\
  WHILE\000\
  DO\000\
  FOR\000\
  IF\000\
  TRY\000\
  EXCEPT\000\
  FINALLY\000\
  ATTRIBUTE\000\
  INLINE\000\
  ASM\000\
  TYPEOF\000\
  FUNCTION__\000\
  PRETTY_FUNCTION__\000\
  BUILTIN_VA_ARG\000\
  ATTRIBUTE_USED\000\
  BUILTIN_TYPES_COMPAT\000\
  BUILTIN_OFFSETOF\000\
  DECLSPEC\000\
  MSASM\000\
  MSATTR\000\
  PRAGMA_LINE\000\
  PRAGMA\000\
  AT_TRANSFORM\000\
  AT_TRANSFORMEXPR\000\
  AT_SPECIFIER\000\
  AT_EXPR\000\
  ANNOTATION\000\
  PRECONDITION\000\
  POSTCONDITION\000\
  INVARIANT\000\
  TINVARIANT\000\
  MODIFIES\000\
  ASSERT\000\
  ASSUME\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition list) in
    Obj.repr(
# 411 "src/frontc/cparser.mly"
              (_1)
# 2844 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition list) in
    Obj.repr(
# 413 "src/frontc/cparser.mly"
                 (_1)
# 2851 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    Obj.repr(
# 416 "src/frontc/cparser.mly"
                                        ( [] )
# 2857 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition list) in
    Obj.repr(
# 417 "src/frontc/cparser.mly"
                                        ( _1 :: _2 )
# 2865 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition list) in
    Obj.repr(
# 418 "src/frontc/cparser.mly"
                                        ( _2 )
# 2873 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    Obj.repr(
# 422 "src/frontc/cparser.mly"
                               ( currentLoc () )
# 2879 "src/frontc/cparser.ml"
               : Cabs.cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 427 "src/frontc/cparser.mly"
                                        ( _1 )
# 2886 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 428 "src/frontc/cparser.mly"
                                        ( _1 )
# 2893 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 431 "src/frontc/cparser.mly"
                                        ( LINKAGE (fst _2, (*handleLoc*) (snd _2), [ _3 ]) )
# 2902 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 433 "src/frontc/cparser.mly"
                                        ( LINKAGE (fst _2, (*handleLoc*) (snd _2), _4)  )
# 2913 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 435 "src/frontc/cparser.mly"
                                        ( GLOBASM (fst _3, (*handleLoc*) _1) )
# 2923 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pragma) in
    Obj.repr(
# 436 "src/frontc/cparser.mly"
                                        ( _1 )
# 2930 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string list) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'old_pardef_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'prepost) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 441 "src/frontc/cparser.mly"
                           ( (* Convert pardecl to new style *)
                             let pardecl, isva = doOldParDecl _3 _5 in 
                             (* Make the function declarator *)
                             doDeclaration ((*handleLoc*) (snd _1)) []
                               [((fst _1, PROTO(JUSTBASE, pardecl,isva, _6), [], cabslu),
                                 NO_INIT)]
                            )
# 2948 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'prepost) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 450 "src/frontc/cparser.mly"
                           ( (* Make the function declarator *)
                             doDeclaration ((*handleLoc*)(snd _1)) []
                               [((fst _1, PROTO(JUSTBASE, [], false, _4), [], cabslu),
                                 NO_INIT)]
                            )
# 2962 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Cabs.definition) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 456 "src/frontc/cparser.mly"
                                                                        (
    checkConnective(fst _5);
    TRANSFORMER(_3, _7, _1)
  )
# 2979 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 461 "src/frontc/cparser.mly"
                                                                                   (
    checkConnective(fst _5);
    EXPRTRANSFORMER(fst _3, fst _7, _1)
  )
# 2996 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 465 "src/frontc/cparser.mly"
                           ( PRAGMA (VARIABLE "parse_error", _1) )
# 3004 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 469 "src/frontc/cparser.mly"
             (fst _1)
# 3011 "src/frontc/cparser.ml"
               : 'id_or_typename))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 470 "src/frontc/cparser.mly"
                  (fst _1)
# 3018 "src/frontc/cparser.ml"
               : 'id_or_typename))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    Obj.repr(
# 471 "src/frontc/cparser.mly"
                                        ( "@name(" ^ fst _3 ^ ")" )
# 3026 "src/frontc/cparser.ml"
               : 'id_or_typename))
; (fun __caml_parser_env ->
    Obj.repr(
# 475 "src/frontc/cparser.mly"
                                        ( () )
# 3032 "src/frontc/cparser.ml"
               : 'maybecomma))
; (fun __caml_parser_env ->
    Obj.repr(
# 476 "src/frontc/cparser.mly"
                                        ( () )
# 3038 "src/frontc/cparser.ml"
               : 'maybecomma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 483 "src/frontc/cparser.mly"
          (VARIABLE (fst _1), snd _1)
# 3045 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.constant * cabsloc) in
    Obj.repr(
# 485 "src/frontc/cparser.mly"
          (CONSTANT (fst _1), snd _1)
# 3052 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 487 "src/frontc/cparser.mly"
          (PAREN (smooth_expression (fst _1)), snd _1)
# 3059 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 489 "src/frontc/cparser.mly"
          ( GNU_BODY (fst3 _2), _1 )
# 3067 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    Obj.repr(
# 493 "src/frontc/cparser.mly"
                         ( EXPR_PATTERN(fst _3), _1 )
# 3076 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_expression) in
    Obj.repr(
# 498 "src/frontc/cparser.mly"
                        ( _1 )
# 3083 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list) in
    Obj.repr(
# 500 "src/frontc/cparser.mly"
   (INDEX (fst _1, smooth_expression _2), snd _1)
# 3091 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    Obj.repr(
# 502 "src/frontc/cparser.mly"
   (CALL (fst _1, _3), snd _1)
# 3100 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 504 "src/frontc/cparser.mly"
                        ( let b, d = _5 in
                          CALL (VARIABLE "__builtin_va_arg", 
                                [fst _3; TYPE_SIZEOF (b, d)]), _1 )
# 3112 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.spec_elem list * Cabs.decl_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 508 "src/frontc/cparser.mly"
                        ( let b1,d1 = _3 in
                          let b2,d2 = _5 in
                          CALL (VARIABLE "__builtin_types_compatible_p", 
                                [TYPE_SIZEOF(b1,d1); TYPE_SIZEOF(b2,d2)]), _1 )
# 3125 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.spec_elem list * Cabs.decl_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'offsetof_member_designator) in
    Obj.repr(
# 513 "src/frontc/cparser.mly"
                        ( transformOffsetOf _3 _5, _1 )
# 3135 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 515 "src/frontc/cparser.mly"
          (MEMBEROF (fst _1, _3), snd _1)
# 3143 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 517 "src/frontc/cparser.mly"
          (MEMBEROFPTR (fst _1, _3), snd _1)
# 3151 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 519 "src/frontc/cparser.mly"
          (UNARY (POSINCR, fst _1), snd _1)
# 3159 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 521 "src/frontc/cparser.mly"
          (UNARY (POSDECR, fst _1), snd _1)
# 3167 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.spec_elem list * Cabs.decl_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'initializer_list_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 524 "src/frontc/cparser.mly"
          ( CAST(_2, COMPOUND_INIT _5), _1 )
# 3178 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 529 "src/frontc/cparser.mly"
          ( VARIABLE (_1) )
# 3185 "src/frontc/cparser.ml"
               : 'offsetof_member_designator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'offsetof_member_designator) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 531 "src/frontc/cparser.mly"
   ( MEMBEROF (_1, fst _3) )
# 3193 "src/frontc/cparser.ml"
               : 'offsetof_member_designator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'offsetof_member_designator) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list) in
    Obj.repr(
# 533 "src/frontc/cparser.mly"
   ( INDEX (_1, smooth_expression _2) )
# 3201 "src/frontc/cparser.ml"
               : 'offsetof_member_designator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'postfix_expression) in
    Obj.repr(
# 538 "src/frontc/cparser.mly"
                        ( _1 )
# 3208 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 540 "src/frontc/cparser.mly"
          (UNARY (PREINCR, fst _2), _1)
# 3216 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 542 "src/frontc/cparser.mly"
          (UNARY (PREDECR, fst _2), _1)
# 3224 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 544 "src/frontc/cparser.mly"
          (EXPR_SIZEOF (fst _2), _1)
# 3232 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 546 "src/frontc/cparser.mly"
          (let b, d = _3 in TYPE_SIZEOF (b, d), _1)
# 3241 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 548 "src/frontc/cparser.mly"
          (EXPR_ALIGNOF (fst _2), _1)
# 3249 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 550 "src/frontc/cparser.mly"
          (let b, d = _3 in TYPE_ALIGNOF (b, d), _1)
# 3258 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 552 "src/frontc/cparser.mly"
          (UNARY (PLUS, fst _2), _1)
# 3266 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 554 "src/frontc/cparser.mly"
          (UNARY (MINUS, fst _2), _1)
# 3274 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 556 "src/frontc/cparser.mly"
          (UNARY (MEMOF, fst _2), _1)
# 3282 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 558 "src/frontc/cparser.mly"
          (UNARY (ADDROF, fst _2), _1)
# 3290 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 560 "src/frontc/cparser.mly"
          (UNARY (NOT, fst _2), _1)
# 3298 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 562 "src/frontc/cparser.mly"
          (UNARY (BNOT, fst _2), _1)
# 3306 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 563 "src/frontc/cparser.mly"
                               ( LABELADDR (fst _2), _1 )
# 3314 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 568 "src/frontc/cparser.mly"
                         ( _1 )
# 3321 "src/frontc/cparser.ml"
               : 'cast_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.spec_elem list * Cabs.decl_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 570 "src/frontc/cparser.mly"
           ( CAST(_2, SINGLE_INIT (fst _4)), _1 )
# 3330 "src/frontc/cparser.ml"
               : 'cast_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 575 "src/frontc/cparser.mly"
                         ( _1 )
# 3337 "src/frontc/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 577 "src/frontc/cparser.mly"
   (BINARY(MUL, fst _1, fst _3), snd _1)
# 3346 "src/frontc/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 579 "src/frontc/cparser.mly"
   (BINARY(DIV, fst _1, fst _3), snd _1)
# 3354 "src/frontc/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 581 "src/frontc/cparser.mly"
   (BINARY(MOD, fst _1, fst _3), snd _1)
# 3362 "src/frontc/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 586 "src/frontc/cparser.mly"
                        ( _1 )
# 3369 "src/frontc/cparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 588 "src/frontc/cparser.mly"
   (BINARY(ADD, fst _1, fst _3), snd _1)
# 3378 "src/frontc/cparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 590 "src/frontc/cparser.mly"
   (BINARY(SUB, fst _1, fst _3), snd _1)
# 3387 "src/frontc/cparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'additive_expression) in
    Obj.repr(
# 595 "src/frontc/cparser.mly"
                         ( _1 )
# 3394 "src/frontc/cparser.ml"
               : 'shift_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_expression) in
    Obj.repr(
# 597 "src/frontc/cparser.mly"
   (BINARY(SHL, fst _1, fst _3), snd _1)
# 3402 "src/frontc/cparser.ml"
               : 'shift_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_expression) in
    Obj.repr(
# 599 "src/frontc/cparser.mly"
   (BINARY(SHR, fst _1, fst _3), snd _1)
# 3410 "src/frontc/cparser.ml"
               : 'shift_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 605 "src/frontc/cparser.mly"
                        ( _1 )
# 3417 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 607 "src/frontc/cparser.mly"
   (BINARY(LT, fst _1, fst _3), snd _1)
# 3425 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 609 "src/frontc/cparser.mly"
   (BINARY(GT, fst _1, fst _3), snd _1)
# 3433 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 611 "src/frontc/cparser.mly"
   (BINARY(LE, fst _1, fst _3), snd _1)
# 3441 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 613 "src/frontc/cparser.mly"
   (BINARY(GE, fst _1, fst _3), snd _1)
# 3449 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 618 "src/frontc/cparser.mly"
                        ( _1 )
# 3456 "src/frontc/cparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 620 "src/frontc/cparser.mly"
   (BINARY(EQ, fst _1, fst _3), snd _1)
# 3464 "src/frontc/cparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 622 "src/frontc/cparser.mly"
   (BINARY(NE, fst _1, fst _3), snd _1)
# 3472 "src/frontc/cparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'equality_expression) in
    Obj.repr(
# 628 "src/frontc/cparser.mly"
                       ( _1 )
# 3479 "src/frontc/cparser.ml"
               : 'bitwise_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_and_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equality_expression) in
    Obj.repr(
# 630 "src/frontc/cparser.mly"
   (BINARY(BAND, fst _1, fst _3), snd _1)
# 3488 "src/frontc/cparser.ml"
               : 'bitwise_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_expression) in
    Obj.repr(
# 635 "src/frontc/cparser.mly"
                       ( _1 )
# 3495 "src/frontc/cparser.ml"
               : 'bitwise_xor_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_xor_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_expression) in
    Obj.repr(
# 637 "src/frontc/cparser.mly"
   (BINARY(XOR, fst _1, fst _3), snd _1)
# 3503 "src/frontc/cparser.ml"
               : 'bitwise_xor_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_expression) in
    Obj.repr(
# 642 "src/frontc/cparser.mly"
                        ( _1 )
# 3510 "src/frontc/cparser.ml"
               : 'bitwise_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_expression) in
    Obj.repr(
# 644 "src/frontc/cparser.mly"
   (BINARY(BOR, fst _1, fst _3), snd _1)
# 3518 "src/frontc/cparser.ml"
               : 'bitwise_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_expression) in
    Obj.repr(
# 649 "src/frontc/cparser.mly"
                        ( _1 )
# 3525 "src/frontc/cparser.ml"
               : 'logical_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_and_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_expression) in
    Obj.repr(
# 651 "src/frontc/cparser.mly"
   (BINARY(AND, fst _1, fst _3), snd _1)
# 3534 "src/frontc/cparser.ml"
               : 'logical_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_expression) in
    Obj.repr(
# 656 "src/frontc/cparser.mly"
                        ( _1 )
# 3541 "src/frontc/cparser.ml"
               : 'logical_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_expression) in
    Obj.repr(
# 658 "src/frontc/cparser.mly"
   (BINARY(OR, fst _1, fst _3), snd _1)
# 3549 "src/frontc/cparser.ml"
               : 'logical_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_or_expression) in
    Obj.repr(
# 663 "src/frontc/cparser.mly"
                         ( _1 )
# 3556 "src/frontc/cparser.ml"
               : 'conditional_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'logical_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_expression) in
    Obj.repr(
# 665 "src/frontc/cparser.mly"
   (QUESTION (fst _1, _3, fst _5), snd _1)
# 3565 "src/frontc/cparser.ml"
               : 'conditional_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_expression) in
    Obj.repr(
# 673 "src/frontc/cparser.mly"
                         ( _1 )
# 3572 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 675 "src/frontc/cparser.mly"
   (BINARY(ASSIGN, fst _1, fst _3), snd _1)
# 3580 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 677 "src/frontc/cparser.mly"
   (BINARY(ADD_ASSIGN, fst _1, fst _3), snd _1)
# 3588 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 679 "src/frontc/cparser.mly"
   (BINARY(SUB_ASSIGN, fst _1, fst _3), snd _1)
# 3596 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 681 "src/frontc/cparser.mly"
   (BINARY(MUL_ASSIGN, fst _1, fst _3), snd _1)
# 3604 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 683 "src/frontc/cparser.mly"
   (BINARY(DIV_ASSIGN, fst _1, fst _3), snd _1)
# 3612 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 685 "src/frontc/cparser.mly"
   (BINARY(MOD_ASSIGN, fst _1, fst _3), snd _1)
# 3620 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 687 "src/frontc/cparser.mly"
   (BINARY(BAND_ASSIGN, fst _1, fst _3), snd _1)
# 3628 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 689 "src/frontc/cparser.mly"
   (BINARY(BOR_ASSIGN, fst _1, fst _3), snd _1)
# 3636 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 691 "src/frontc/cparser.mly"
   (BINARY(XOR_ASSIGN, fst _1, fst _3), snd _1)
# 3644 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 693 "src/frontc/cparser.mly"
   (BINARY(SHL_ASSIGN, fst _1, fst _3), snd _1)
# 3652 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 695 "src/frontc/cparser.mly"
   (BINARY(SHR_ASSIGN, fst _1, fst _3), snd _1)
# 3660 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 700 "src/frontc/cparser.mly"
                        ( _1 )
# 3667 "src/frontc/cparser.ml"
               : Cabs.expression * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 705 "src/frontc/cparser.mly"
               (CONST_INT (fst _1), snd _1)
# 3674 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 706 "src/frontc/cparser.mly"
                 (CONST_FLOAT (fst _1), snd _1)
# 3681 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 707 "src/frontc/cparser.mly"
                (CONST_CHAR (fst _1), snd _1)
# 3688 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 708 "src/frontc/cparser.mly"
                 (CONST_WCHAR (fst _1), snd _1)
# 3695 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * cabsloc) in
    Obj.repr(
# 709 "src/frontc/cparser.mly"
                             (CONST_STRING (fst _1), snd _1)
# 3702 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * cabsloc) in
    Obj.repr(
# 710 "src/frontc/cparser.mly"
                   (CONST_WSTRING (fst _1), snd _1)
# 3709 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list Queue.t * cabsloc) in
    Obj.repr(
# 716 "src/frontc/cparser.mly"
                                        (
     let queue, location = _1 in
     let buffer = Buffer.create (Queue.length queue) in
     Queue.iter
       (List.iter
	  (fun value ->
	    let char = int64_to_char value in
	    Buffer.add_char buffer char))
       queue;
     Buffer.contents buffer, location
   )
# 3726 "src/frontc/cparser.ml"
               : string * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 730 "src/frontc/cparser.mly"
                                        (intlist_to_string (fst _1) )
# 3733 "src/frontc/cparser.ml"
               : 'one_string_constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'one_string) in
    Obj.repr(
# 733 "src/frontc/cparser.mly"
                                        (
      let queue = Queue.create () in
      Queue.add (fst _1) queue;
      queue, snd _1
    )
# 3744 "src/frontc/cparser.ml"
               : int64 list Queue.t * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int64 list Queue.t * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'one_string) in
    Obj.repr(
# 738 "src/frontc/cparser.mly"
                                        (
      Queue.add (fst _2) (fst _1);
      _1
    )
# 3755 "src/frontc/cparser.ml"
               : int64 list Queue.t * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 745 "src/frontc/cparser.mly"
                                        ( _1 )
# 3762 "src/frontc/cparser.ml"
               : int64 list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int64 list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'one_string) in
    Obj.repr(
# 746 "src/frontc/cparser.mly"
                                        ( (fst _1) @ (fst _2), snd _1 )
# 3770 "src/frontc/cparser.ml"
               : int64 list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int64 list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 747 "src/frontc/cparser.mly"
                                        ( (fst _1) @ (fst _2), snd _1 )
# 3778 "src/frontc/cparser.ml"
               : int64 list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 752 "src/frontc/cparser.mly"
                  (_1)
# 3785 "src/frontc/cparser.ml"
               : 'one_string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 753 "src/frontc/cparser.mly"
                                        ((Cabshelper.explodeStringToInts 
					    !currentFunctionName), _1)
# 3793 "src/frontc/cparser.ml"
               : 'one_string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 755 "src/frontc/cparser.mly"
                                        ((Cabshelper.explodeStringToInts 
					    !currentFunctionName), _1)
# 3801 "src/frontc/cparser.ml"
               : 'one_string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression * cabsloc) in
    Obj.repr(
# 760 "src/frontc/cparser.mly"
                        ( SINGLE_INIT (fst _1) )
# 3808 "src/frontc/cparser.ml"
               : Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'initializer_list_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 762 "src/frontc/cparser.mly"
   ( COMPOUND_INIT _2)
# 3817 "src/frontc/cparser.ml"
               : Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat * Cabs.init_expression) in
    Obj.repr(
# 765 "src/frontc/cparser.mly"
                                            ( [_1] )
# 3824 "src/frontc/cparser.ml"
               : (Cabs.initwhat * Cabs.init_expression) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.initwhat * Cabs.init_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'initializer_list_opt) in
    Obj.repr(
# 766 "src/frontc/cparser.mly"
                                            ( _1 :: _3 )
# 3832 "src/frontc/cparser.ml"
               : (Cabs.initwhat * Cabs.init_expression) list))
; (fun __caml_parser_env ->
    Obj.repr(
# 769 "src/frontc/cparser.mly"
                                            ( [] )
# 3838 "src/frontc/cparser.ml"
               : 'initializer_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (Cabs.initwhat * Cabs.init_expression) list) in
    Obj.repr(
# 770 "src/frontc/cparser.mly"
                                            ( _1 )
# 3845 "src/frontc/cparser.ml"
               : 'initializer_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.initwhat) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'eq_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 773 "src/frontc/cparser.mly"
                                            ( (_1, _3) )
# 3854 "src/frontc/cparser.ml"
               : Cabs.initwhat * Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'gcc_init_designators) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 774 "src/frontc/cparser.mly"
                                         ( (_1, _2) )
# 3862 "src/frontc/cparser.ml"
               : Cabs.initwhat * Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 775 "src/frontc/cparser.mly"
                                        ( (NEXT_INIT, _1) )
# 3869 "src/frontc/cparser.ml"
               : Cabs.initwhat * Cabs.init_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 778 "src/frontc/cparser.mly"
                             ( () )
# 3875 "src/frontc/cparser.ml"
               : 'eq_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 780 "src/frontc/cparser.mly"
                                 ( () )
# 3881 "src/frontc/cparser.ml"
               : 'eq_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat) in
    Obj.repr(
# 783 "src/frontc/cparser.mly"
                                                 ( INFIELD_INIT(_2, _3) )
# 3889 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat) in
    Obj.repr(
# 785 "src/frontc/cparser.mly"
                                        ( ATINDEX_INIT(fst _2, _4) )
# 3897 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    Obj.repr(
# 787 "src/frontc/cparser.mly"
                                        ( ATINDEXRANGE_INIT(fst _2, fst _4) )
# 3905 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    Obj.repr(
# 790 "src/frontc/cparser.mly"
                                        ( NEXT_INIT )
# 3911 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat) in
    Obj.repr(
# 791 "src/frontc/cparser.mly"
                                        ( _1 )
# 3918 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'id_or_typename) in
    Obj.repr(
# 795 "src/frontc/cparser.mly"
                                        ( INFIELD_INIT(_1, NEXT_INIT) )
# 3925 "src/frontc/cparser.ml"
               : 'gcc_init_designators))
; (fun __caml_parser_env ->
    Obj.repr(
# 799 "src/frontc/cparser.mly"
                                    ( [] )
# 3931 "src/frontc/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 800 "src/frontc/cparser.mly"
                                    ( fst _1 )
# 3938 "src/frontc/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    Obj.repr(
# 805 "src/frontc/cparser.mly"
          (NOTHING)
# 3944 "src/frontc/cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 807 "src/frontc/cparser.mly"
          (smooth_expression (fst _1))
# 3951 "src/frontc/cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression * cabsloc) in
    Obj.repr(
# 811 "src/frontc/cparser.mly"
                                           ([fst _1], snd _1)
# 3958 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 812 "src/frontc/cparser.mly"
                                                  ( fst _1 :: fst _3, snd _1 )
# 3966 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 813 "src/frontc/cparser.mly"
                                                  ( _3 )
# 3973 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 817 "src/frontc/cparser.mly"
                                    ( NOTHING )
# 3979 "src/frontc/cparser.ml"
               : 'comma_expression_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 818 "src/frontc/cparser.mly"
                                    ( smooth_expression (fst _1) )
# 3986 "src/frontc/cparser.ml"
               : 'comma_expression_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 822 "src/frontc/cparser.mly"
                                                   ( _2 )
# 3994 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    Obj.repr(
# 823 "src/frontc/cparser.mly"
                                                   ( [], _1 )
# 4001 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 827 "src/frontc/cparser.mly"
                                                       ( fst _2 )
# 4008 "src/frontc/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    Obj.repr(
# 828 "src/frontc/cparser.mly"
                                                       ( [] )
# 4014 "src/frontc/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'block_begin) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'block_attrs) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.statement list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 835 "src/frontc/cparser.mly"
                                         (!Lexerhack.pop_context();
                                          { blabels = _2;
                                            battrs = _3;
                                            bstmts = _4 },
					    _1, _5
                                         )
# 4030 "src/frontc/cparser.ml"
               : Cabs.block * cabsloc * cabsloc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 841 "src/frontc/cparser.mly"
                                         ( { blabels = [];
                                             battrs  = [];
                                             bstmts  = [] },
					     _2, _3
                                         )
# 4042 "src/frontc/cparser.ml"
               : Cabs.block * cabsloc * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 848 "src/frontc/cparser.mly"
                           (!Lexerhack.push_context (); _1)
# 4049 "src/frontc/cparser.ml"
               : 'block_begin))
; (fun __caml_parser_env ->
    Obj.repr(
# 852 "src/frontc/cparser.mly"
                                                            ( [] )
# 4055 "src/frontc/cparser.ml"
               : 'block_attrs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 854 "src/frontc/cparser.mly"
                                        ( [("__blockattribute__", _2)] )
# 4062 "src/frontc/cparser.ml"
               : 'block_attrs))
; (fun __caml_parser_env ->
    Obj.repr(
# 859 "src/frontc/cparser.mly"
                                         ( [] )
# 4068 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement list) in
    Obj.repr(
# 860 "src/frontc/cparser.mly"
                                         ( DEFINITION(_1) :: _2 )
# 4076 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.statement) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement list) in
    Obj.repr(
# 861 "src/frontc/cparser.mly"
                                         ( _1 :: _2 )
# 4084 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    Obj.repr(
# 863 "src/frontc/cparser.mly"
                                         ( [ LABEL (fst _1, NOP (snd _1), 
                                                    snd _1)] )
# 4092 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pragma) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement list) in
    Obj.repr(
# 865 "src/frontc/cparser.mly"
                                         ( _2 )
# 4100 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    Obj.repr(
# 869 "src/frontc/cparser.mly"
                                                     ( [] )
# 4106 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 870 "src/frontc/cparser.mly"
                                                     ( _2 @ _4 )
# 4115 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 873 "src/frontc/cparser.mly"
                                         ( [ fst _1 ] )
# 4122 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 874 "src/frontc/cparser.mly"
                                         ( fst _1 :: _3 )
# 4130 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 880 "src/frontc/cparser.mly"
               (NOP ((*handleLoc*) _1) )
# 4137 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 882 "src/frontc/cparser.mly"
          (COMPUTATION (smooth_expression (fst _1), (*handleLoc*)(snd _1)))
# 4145 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 883 "src/frontc/cparser.mly"
                        (BLOCK (fst3 _1, (*handleLoc*)(snd3 _1)))
# 4152 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 885 "src/frontc/cparser.mly"
                 (IF (smooth_expression (fst _2), _3, NOP _1, _1))
# 4161 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.statement) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 887 "src/frontc/cparser.mly"
                 (IF (smooth_expression (fst _2), _3, _5, (*handleLoc*) _1))
# 4171 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 889 "src/frontc/cparser.mly"
                        (SWITCH (smooth_expression (fst _2), _3, (*handleLoc*) _1))
# 4180 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 891 "src/frontc/cparser.mly"
          (WHILE (smooth_expression (fst _2), _3, (*handleLoc*) _1))
# 4189 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.statement) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 893 "src/frontc/cparser.mly"
                   (DOWHILE (smooth_expression (fst _4), _2, (*handleLoc*) _1))
# 4200 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'for_clause) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Cabs.expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 896 "src/frontc/cparser.mly"
                          (FOR (_3, _4, _6, _8, (*handleLoc*) _1))
# 4213 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'attribute_nocv_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 898 "src/frontc/cparser.mly"
                   ((* The only attribute that should appear here
                                     is "unused". For now, we drop this on the
                                     floor, since unused labels are usually
                                     removed anyways by Rmtmps. *)
                                  LABEL (fst _1, _4, (snd _1)))
# 4226 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 904 "src/frontc/cparser.mly"
                          (CASE (fst _2, _4, (*handleLoc*) _1))
# 4235 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression * cabsloc) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 906 "src/frontc/cparser.mly"
                          (CASERANGE (fst _2, fst _4, _6, (*handleLoc*) _1))
# 4245 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 908 "src/frontc/cparser.mly"
                          (DEFAULT (NOP _1, (*handleLoc*) _1))
# 4252 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 909 "src/frontc/cparser.mly"
                       (RETURN (NOTHING, (*handleLoc*) _1))
# 4260 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 911 "src/frontc/cparser.mly"
                          (RETURN (smooth_expression (fst _2), (*handleLoc*) _1))
# 4269 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 912 "src/frontc/cparser.mly"
                        (BREAK ((*handleLoc*) _1))
# 4277 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 913 "src/frontc/cparser.mly"
                        (CONTINUE ((*handleLoc*) _1))
# 4285 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 915 "src/frontc/cparser.mly"
                   (GOTO (fst _2, (*handleLoc*) _1))
# 4294 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 917 "src/frontc/cparser.mly"
                                 ( COMPGOTO (smooth_expression (fst _3), (*handleLoc*) _1) )
# 4304 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'asmtemplate) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'asmoutputs) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 919 "src/frontc/cparser.mly"
                        ( ASM (_2, _4, _5, (*handleLoc*) _1) )
# 4316 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 920 "src/frontc/cparser.mly"
                        ( ASM ([], [fst _1], None, (*handleLoc*)(snd _1)))
# 4323 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.block * cabsloc * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 922 "src/frontc/cparser.mly"
                        ( let b, _, _ = _2 in
                          let h, _, _ = _5 in
                          if not !Cprint.msvcMode then 
                            parse_error "try/except in GCC code";
                          TRY_EXCEPT (b, COMMA (fst _4), h, (*handleLoc*) _1) )
# 4338 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.block * cabsloc * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 928 "src/frontc/cparser.mly"
                        ( let b, _, _ = _2 in
                          let h, _, _ = _4 in
                          if not !Cprint.msvcMode then 
                            parse_error "try/finally in GCC code";
                          TRY_FINALLY (b, h, (*handleLoc*) _1) )
# 4352 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : string * cabsloc) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 935 "src/frontc/cparser.mly"
                        ( ASSERT (fst _3, fst _5, snd _3) )
# 4363 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : string * cabsloc) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 937 "src/frontc/cparser.mly"
                        ( ASSUME (fst _3, fst _5, snd _3) )
# 4374 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : string * cabsloc) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 939 "src/frontc/cparser.mly"
   ( INVARIANT (fst _3, fst _5, snd _3) )
# 4385 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 941 "src/frontc/cparser.mly"
                                 ( (NOP _2))
# 4393 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 946 "src/frontc/cparser.mly"
                                 ( FC_EXP _1 )
# 4401 "src/frontc/cparser.ml"
               : 'for_clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 947 "src/frontc/cparser.mly"
                                 ( FC_DECL _1 )
# 4408 "src/frontc/cparser.ml"
               : 'for_clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.init_name list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 952 "src/frontc/cparser.mly"
                                       ( doDeclaration ((*handleLoc*)(snd _1)) (fst _1) _2 )
# 4417 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 954 "src/frontc/cparser.mly"
                                       ( doDeclaration ((*handleLoc*)(snd _1)) (fst _1) [] )
# 4425 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_name) in
    Obj.repr(
# 957 "src/frontc/cparser.mly"
                                                 ( [_1] )
# 4432 "src/frontc/cparser.ml"
               : Cabs.init_name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.init_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_name list) in
    Obj.repr(
# 958 "src/frontc/cparser.mly"
                                                 ( _1 :: _3 )
# 4440 "src/frontc/cparser.ml"
               : Cabs.init_name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 962 "src/frontc/cparser.mly"
                                        ( (_1, NO_INIT) )
# 4447 "src/frontc/cparser.ml"
               : Cabs.init_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 964 "src/frontc/cparser.mly"
                                        ( (_1, _3) )
# 4455 "src/frontc/cparser.ml"
               : Cabs.init_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 969 "src/frontc/cparser.mly"
                                        ( SpecTypedef :: _2, _1  )
# 4463 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 970 "src/frontc/cparser.mly"
                                        ( SpecStorage EXTERN :: _2, _1 )
# 4471 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 971 "src/frontc/cparser.mly"
                                        ( SpecStorage STATIC :: _2, _1 )
# 4479 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 972 "src/frontc/cparser.mly"
                                        ( SpecStorage AUTO :: _2, _1 )
# 4487 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 973 "src/frontc/cparser.mly"
                                        ( SpecStorage REGISTER :: _2, _1)
# 4495 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : typeSpecifier * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt_no_named) in
    Obj.repr(
# 975 "src/frontc/cparser.mly"
                                          ( SpecType (fst _1) :: _2, snd _1 )
# 4503 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 977 "src/frontc/cparser.mly"
                                        ( SpecInline :: _2, _1 )
# 4511 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 978 "src/frontc/cparser.mly"
                                        ( (fst _1) :: _2, snd _1 )
# 4519 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute_nocv) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 979 "src/frontc/cparser.mly"
                                        ( SpecAttr (fst _1) :: _2, snd _1 )
# 4527 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    Obj.repr(
# 981 "src/frontc/cparser.mly"
                                        ( [ SpecPattern(fst _3) ], _1 )
# 4536 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 986 "src/frontc/cparser.mly"
                                        ( [] )
# 4542 "src/frontc/cparser.ml"
               : 'decl_spec_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 987 "src/frontc/cparser.mly"
                                        ( fst _1 )
# 4549 "src/frontc/cparser.ml"
               : 'decl_spec_list_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 994 "src/frontc/cparser.mly"
                                        ( [] )
# 4555 "src/frontc/cparser.ml"
               : 'decl_spec_list_opt_no_named))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 995 "src/frontc/cparser.mly"
                                        ( fst _1 )
# 4562 "src/frontc/cparser.ml"
               : 'decl_spec_list_opt_no_named))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 998 "src/frontc/cparser.mly"
                    ( Tvoid, _1)
# 4569 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 999 "src/frontc/cparser.mly"
                    ( Tchar, _1 )
# 4576 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1000 "src/frontc/cparser.mly"
                    ( Tshort, _1 )
# 4583 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1001 "src/frontc/cparser.mly"
                    ( Tint, _1 )
# 4590 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1002 "src/frontc/cparser.mly"
                    ( Tlong, _1 )
# 4597 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1003 "src/frontc/cparser.mly"
                    ( Tint64, _1 )
# 4604 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1004 "src/frontc/cparser.mly"
                    ( Tfloat, _1 )
# 4611 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1005 "src/frontc/cparser.mly"
                    ( Tdouble, _1 )
# 4618 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1006 "src/frontc/cparser.mly"
                    ( Tsigned, _1 )
# 4625 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1007 "src/frontc/cparser.mly"
                    ( Tunsigned, _1 )
# 4632 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1009 "src/frontc/cparser.mly"
                                                   ( Tstruct (_2, [], None,    []), _1 )
# 4640 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1011 "src/frontc/cparser.mly"
                                                   ( Tstruct (_3, [], None,    _2), _1 )
# 4649 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'prepost) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1013 "src/frontc/cparser.mly"
                                                   ( Tstruct (_2, _3, Some _5, []), _1 )
# 4661 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'prepost) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1015 "src/frontc/cparser.mly"
                                                   ( Tstruct ("", _2, Some _4, []), _1 )
# 4672 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'id_or_typename) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'prepost) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1017 "src/frontc/cparser.mly"
                                                   ( Tstruct (_3, _4, Some _6, _2), _1 )
# 4685 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'prepost) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1019 "src/frontc/cparser.mly"
                                                   ( Tstruct ("", _3, Some _5, _2), _1 )
# 4697 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1021 "src/frontc/cparser.mly"
                                                   ( Tunion  (_2, [], None,    []), _1 )
# 4705 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'prepost) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1023 "src/frontc/cparser.mly"
                                                   ( Tunion  (_2, _3, Some _5, []), _1 )
# 4717 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'prepost) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1025 "src/frontc/cparser.mly"
                                                   ( Tunion  ("", _2, Some _4, []), _1 )
# 4728 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'id_or_typename) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'prepost) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1027 "src/frontc/cparser.mly"
                                                   ( Tunion  (_3, _4, Some _6, _2), _1 )
# 4741 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'prepost) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1029 "src/frontc/cparser.mly"
                                                   ( Tunion  ("", _3, Some _5, _2), _1 )
# 4753 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1031 "src/frontc/cparser.mly"
                                                   ( Tenum   (_2, None,    []), _1 )
# 4761 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1033 "src/frontc/cparser.mly"
                                                   ( Tenum   (_2, Some _4, []), _1 )
# 4773 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1035 "src/frontc/cparser.mly"
                                                   ( Tenum   ("", Some _3, []), _1 )
# 4784 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'id_or_typename) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1037 "src/frontc/cparser.mly"
                                                   ( Tenum   (_3, Some _5, _2), _1 )
# 4797 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1039 "src/frontc/cparser.mly"
                                                   ( Tenum   ("", Some _4, _2), _1 )
# 4809 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1040 "src/frontc/cparser.mly"
                    ( Tnamed (fst _1), snd _1 )
# 4816 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    Obj.repr(
# 1041 "src/frontc/cparser.mly"
                                        ( TtypeofE (fst _3), _1 )
# 4825 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 1042 "src/frontc/cparser.mly"
                                        ( let s, d = _3 in
                                          TtypeofT (s, d), _1 )
# 4835 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 1048 "src/frontc/cparser.mly"
                                         ( [] )
# 4841 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1050 "src/frontc/cparser.mly"
                                         ( (fst _1, 
                                            [(missingFieldDecl, None)]) :: _3 )
# 4851 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1054 "src/frontc/cparser.mly"
                                         ( _2 )
# 4859 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : (Cabs.name * expression option) list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1056 "src/frontc/cparser.mly"
                                          ( (fst _1, _2) 
                                            :: _4 )
# 4870 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pragma) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1059 "src/frontc/cparser.mly"
                                          ( _2 )
# 4878 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1062 "src/frontc/cparser.mly"
                                          ( _3 )
# 4886 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name * expression option) in
    Obj.repr(
# 1065 "src/frontc/cparser.mly"
                                         ( [_1] )
# 4893 "src/frontc/cparser.ml"
               : (Cabs.name * expression option) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name * expression option) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (Cabs.name * expression option) list) in
    Obj.repr(
# 1066 "src/frontc/cparser.mly"
                                         ( _1 :: _3 )
# 4901 "src/frontc/cparser.ml"
               : (Cabs.name * expression option) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1069 "src/frontc/cparser.mly"
                                    ( (_1, None) )
# 4908 "src/frontc/cparser.ml"
               : Cabs.name * expression option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.name) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1071 "src/frontc/cparser.mly"
                                    ( let (n,decl,al,loc) = _1 in
                                      let al' = al @ _4 in
                                     ((n,decl,al',loc), Some (fst _3)) )
# 4919 "src/frontc/cparser.ml"
               : Cabs.name * expression option))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression * cabsloc) in
    Obj.repr(
# 1074 "src/frontc/cparser.mly"
                                    ( (missingFieldDecl, Some (fst _2)) )
# 4926 "src/frontc/cparser.ml"
               : Cabs.name * expression option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.enum_item) in
    Obj.repr(
# 1078 "src/frontc/cparser.mly"
                  ([_1])
# 4933 "src/frontc/cparser.ml"
               : Cabs.enum_item list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.enum_item) in
    Obj.repr(
# 1079 "src/frontc/cparser.mly"
                                       (_1 @ [_3])
# 4941 "src/frontc/cparser.ml"
               : Cabs.enum_item list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    Obj.repr(
# 1080 "src/frontc/cparser.mly"
                                        ( _1 )
# 4948 "src/frontc/cparser.ml"
               : Cabs.enum_item list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1083 "src/frontc/cparser.mly"
            ((fst _1, NOTHING, snd _1))
# 4955 "src/frontc/cparser.ml"
               : Cabs.enum_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression * cabsloc) in
    Obj.repr(
# 1084 "src/frontc/cparser.mly"
                         ((fst _1, fst _3, snd _1))
# 4963 "src/frontc/cparser.ml"
               : Cabs.enum_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : attribute list list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1090 "src/frontc/cparser.mly"
                               ( let (n, decl) = _2 in
                                (n, applyPointer (fst _1) decl, _3, (snd _1)) )
# 4973 "src/frontc/cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1098 "src/frontc/cparser.mly"
                                   ( (_1, JUSTBASE) )
# 4980 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.name) in
    Obj.repr(
# 1101 "src/frontc/cparser.mly"
                                   ( let (n,decl,al,loc) = _3 in
                                     (n, PARENTYPE(_2,decl,al)) )
# 4990 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'comma_expression_opt) in
    Obj.repr(
# 1105 "src/frontc/cparser.mly"
                                   ( let (n, decl) = _1 in
                                     (n, ARRAY(decl, _3, _4)) )
# 5000 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    Obj.repr(
# 1108 "src/frontc/cparser.mly"
                                   ( let (n, decl) = _1 in
                                     (n, ARRAY(decl, _3, NOTHING)) )
# 5009 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'parameter_list_startscope) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'rest_par_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'prepost) in
    Obj.repr(
# 1111 "src/frontc/cparser.mly"
                                   ( let (n, decl) = _1 in
                                     let (params, isva) = _3 in
                                     !Lexerhack.pop_context ();
                                     (n, PROTO(decl, params, isva, _5)) 
                                   )
# 5023 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1118 "src/frontc/cparser.mly"
                                   ( !Lexerhack.push_context () )
# 5030 "src/frontc/cparser.ml"
               : 'parameter_list_startscope))
; (fun __caml_parser_env ->
    Obj.repr(
# 1121 "src/frontc/cparser.mly"
                                   ( ([], false) )
# 5036 "src/frontc/cparser.ml"
               : 'rest_par_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rest_par_list1) in
    Obj.repr(
# 1122 "src/frontc/cparser.mly"
                                   ( let (params, isva) = _2 in 
                                     (_1 :: params, isva) 
                                   )
# 5046 "src/frontc/cparser.ml"
               : 'rest_par_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1127 "src/frontc/cparser.mly"
                                        ( ([], false) )
# 5052 "src/frontc/cparser.ml"
               : 'rest_par_list1))
; (fun __caml_parser_env ->
    Obj.repr(
# 1128 "src/frontc/cparser.mly"
                                        ( ([], true) )
# 5058 "src/frontc/cparser.ml"
               : 'rest_par_list1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rest_par_list1) in
    Obj.repr(
# 1129 "src/frontc/cparser.mly"
                                        ( let (params, isva) = _3 in 
                                          (_2 :: params, isva)
                                        )
# 5068 "src/frontc/cparser.ml"
               : 'rest_par_list1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1136 "src/frontc/cparser.mly"
                                          ( (fst _1, _2) )
# 5076 "src/frontc/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.decl_type * Cabs.attribute list) in
    Obj.repr(
# 1137 "src/frontc/cparser.mly"
                                          ( let d, a = _2 in
                                            (fst _1, ("", d, a, cabslu)) )
# 5085 "src/frontc/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 1139 "src/frontc/cparser.mly"
                                          ( (fst _1, ("", JUSTBASE, [], cabslu)) )
# 5092 "src/frontc/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name) in
    Obj.repr(
# 1140 "src/frontc/cparser.mly"
                                          ( _2 )
# 5100 "src/frontc/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : attribute list list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'direct_old_proto_decl) in
    Obj.repr(
# 1145 "src/frontc/cparser.mly"
                                      ( let (n, decl, a) = _2 in
					  (n, applyPointer (fst _1) decl, 
                                           a, snd _1) 
                                      )
# 5111 "src/frontc/cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'old_pardef_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'prepost) in
    Obj.repr(
# 1154 "src/frontc/cparser.mly"
                                   ( let par_decl, isva = doOldParDecl _3 _5 in
                                     let n, decl = _1 in
                                     (n, PROTO(decl, par_decl, isva, _6), [])
                                   )
# 5125 "src/frontc/cparser.ml"
               : 'direct_old_proto_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'prepost) in
    Obj.repr(
# 1159 "src/frontc/cparser.mly"
                                   ( let n, decl = _1 in
                                     (n, PROTO(decl, [], false, _4), [])
                                   )
# 5136 "src/frontc/cparser.ml"
               : 'direct_old_proto_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1174 "src/frontc/cparser.mly"
                                               ( [fst _1] )
# 5143 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 1175 "src/frontc/cparser.mly"
                                               ( let rest = _3 in
                                                 (fst _1 :: rest) )
# 5152 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1180 "src/frontc/cparser.mly"
                                          ( ([], false) )
# 5158 "src/frontc/cparser.ml"
               : 'old_pardef_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'old_pardef) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1182 "src/frontc/cparser.mly"
                                          ( ([(fst _1, _2)], true) )
# 5167 "src/frontc/cparser.ml"
               : 'old_pardef_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'old_pardef) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef_list) in
    Obj.repr(
# 1184 "src/frontc/cparser.mly"
                                          ( let rest, isva = _4 in
                                            ((fst _1, _2) :: rest, isva) 
                                          )
# 5179 "src/frontc/cparser.ml"
               : 'old_pardef_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1190 "src/frontc/cparser.mly"
                                          ( [_1] )
# 5186 "src/frontc/cparser.ml"
               : 'old_pardef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef) in
    Obj.repr(
# 1191 "src/frontc/cparser.mly"
                                          ( _1 :: _3 )
# 5194 "src/frontc/cparser.ml"
               : 'old_pardef))
; (fun __caml_parser_env ->
    Obj.repr(
# 1192 "src/frontc/cparser.mly"
                                          ( [] )
# 5200 "src/frontc/cparser.ml"
               : 'old_pardef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : attribute list list * cabsloc) in
    Obj.repr(
# 1197 "src/frontc/cparser.mly"
                                ( _2 :: fst _3, _1 )
# 5209 "src/frontc/cparser.ml"
               : attribute list list * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 1200 "src/frontc/cparser.mly"
                                 ( let l = currentLoc () in
                                   ([], l) )
# 5216 "src/frontc/cparser.ml"
               : attribute list list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : attribute list list * cabsloc) in
    Obj.repr(
# 1202 "src/frontc/cparser.mly"
                                 ( _1 )
# 5223 "src/frontc/cparser.ml"
               : attribute list list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.decl_type * Cabs.attribute list) in
    Obj.repr(
# 1206 "src/frontc/cparser.mly"
                               ( let d, a = _2 in
                                 if a <> [] then begin
                                   parse_error "attributes in type name";
                                   raise Parsing.Parse_error
                                 end;
                                 (fst _1, d) 
                               )
# 5237 "src/frontc/cparser.ml"
               : Cabs.spec_elem list * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 1213 "src/frontc/cparser.mly"
                               ( (fst _1, JUSTBASE) )
# 5244 "src/frontc/cparser.ml"
               : Cabs.spec_elem list * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : attribute list list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1216 "src/frontc/cparser.mly"
                                          ( applyPointer (fst _1) _2, _3 )
# 5253 "src/frontc/cparser.ml"
               : Cabs.decl_type * Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : attribute list list * cabsloc) in
    Obj.repr(
# 1217 "src/frontc/cparser.mly"
                                          ( applyPointer (fst _1) JUSTBASE, [] )
# 5260 "src/frontc/cparser.ml"
               : Cabs.decl_type * Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.decl_type * Cabs.attribute list) in
    Obj.repr(
# 1224 "src/frontc/cparser.mly"
                                   ( let d, a = _3 in
                                     PARENTYPE (_2, d, a)
                                   )
# 5271 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    Obj.repr(
# 1229 "src/frontc/cparser.mly"
                                   ( JUSTBASE )
# 5278 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'comma_expression_opt) in
    Obj.repr(
# 1232 "src/frontc/cparser.mly"
                                   ( ARRAY(_1, [], _3) )
# 5286 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list_startscope) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'rest_par_list) in
    Obj.repr(
# 1235 "src/frontc/cparser.mly"
                                   ( let (params, isva) = _3 in
                                     !Lexerhack.pop_context ();
                                     PROTO (_1, params, isva, [])
                                   )
# 5298 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.decl_type) in
    Obj.repr(
# 1241 "src/frontc/cparser.mly"
                                    ( _1 )
# 5305 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 1242 "src/frontc/cparser.mly"
                                    ( JUSTBASE )
# 5311 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : cabsloc * spec_elem list * name) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 1246 "src/frontc/cparser.mly"
          ( let (loc, specs, decl) = _1 in
            currentFunctionName := "<__FUNCTION__ used outside any functions>";
            !Lexerhack.pop_context (); (* The context pushed by 
                                    * announceFunctionName *)
            doFunctionDef ((*handleLoc*) loc) (trd3 _2) specs decl (fst3 _2) 
          )
# 5324 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1255 "src/frontc/cparser.mly"
                            ( announceFunctionName _2;
                              (snd _1, fst _1, _2)
                            )
# 5334 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1261 "src/frontc/cparser.mly"
                            ( announceFunctionName _2;
                              (snd _1, fst _1, _2)
                            )
# 5344 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'parameter_list_startscope) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'rest_par_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'prepost) in
    Obj.repr(
# 1266 "src/frontc/cparser.mly"
                           ( let (params, isva) = _3 in
                             let fdec = 
                               (fst _1, PROTO(JUSTBASE, params, isva, _5), [], snd _1) in
                             announceFunctionName fdec;
                             (* Default is int type *)
                             let defSpec = [SpecType Tint] in
                             (snd _1, defSpec, fdec)
                           )
# 5361 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'old_pardef_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'prepost) in
    Obj.repr(
# 1277 "src/frontc/cparser.mly"
                           ( (* Convert pardecl to new style *)
                             let pardecl, isva = doOldParDecl _3 _5 in
                             (* Make the function declarator *)
                             let fdec = (fst _1,
                                         PROTO(JUSTBASE, pardecl,isva,_6), 
                                         [], snd _1) in
                             announceFunctionName fdec;
                             (* Default is int type *)
                             let defSpec = [SpecType Tint] in
                             (snd _1, defSpec, fdec) 
                            )
# 5382 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'prepost) in
    Obj.repr(
# 1290 "src/frontc/cparser.mly"
                           ( (* Make the function declarator *)
                             let fdec = (fst _1,
                                         PROTO(JUSTBASE, [], false, _4), 
                                         [], snd _1) in
                             announceFunctionName fdec;
                             (* Default is int type *)
                             let defSpec = [SpecType Tint] in
                             (snd _1, defSpec, fdec)
                            )
# 5399 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    Obj.repr(
# 1303 "src/frontc/cparser.mly"
                                    ( [] )
# 5405 "src/frontc/cparser.ml"
               : 'prepost))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prepost_ne) in
    Obj.repr(
# 1304 "src/frontc/cparser.mly"
                                    ( _1 )
# 5412 "src/frontc/cparser.ml"
               : 'prepost))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prepost_cond) in
    Obj.repr(
# 1308 "src/frontc/cparser.mly"
                                    ( [ _1 ] )
# 5419 "src/frontc/cparser.ml"
               : 'prepost_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prepost_cond) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'prepost_ne) in
    Obj.repr(
# 1309 "src/frontc/cparser.mly"
                                    ( _1 :: _2 )
# 5427 "src/frontc/cparser.ml"
               : 'prepost_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string * cabsloc) in
    Obj.repr(
# 1314 "src/frontc/cparser.mly"
                                    ( PRECOND ((fst _3), (fst _5), (snd _3)) )
# 5437 "src/frontc/cparser.ml"
               : 'prepost_cond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string * cabsloc) in
    Obj.repr(
# 1316 "src/frontc/cparser.mly"
                                    ( POSTCOND ((fst _3), (fst _5), (snd _3)) )
# 5447 "src/frontc/cparser.ml"
               : 'prepost_cond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string * cabsloc) in
    Obj.repr(
# 1318 "src/frontc/cparser.mly"
                                    ( MODIFIES ((fst _3), (fst _5), (snd _3)) )
# 5457 "src/frontc/cparser.ml"
               : 'prepost_cond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string * cabsloc) in
    Obj.repr(
# 1320 "src/frontc/cparser.mly"
                                    ( TINVARIANT ((fst _3), (fst _5), (snd _3)) )
# 5467 "src/frontc/cparser.ml"
               : 'prepost_cond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1326 "src/frontc/cparser.mly"
                                        ( SpecCV(CV_CONST), _1 )
# 5474 "src/frontc/cparser.ml"
               : Cabs.spec_elem * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1327 "src/frontc/cparser.mly"
                                        ( SpecCV(CV_VOLATILE), _1 )
# 5481 "src/frontc/cparser.ml"
               : Cabs.spec_elem * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1328 "src/frontc/cparser.mly"
                                        ( SpecCV(CV_RESTRICT), _1 )
# 5488 "src/frontc/cparser.ml"
               : Cabs.spec_elem * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 1333 "src/frontc/cparser.mly"
                   ( [])
# 5494 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1334 "src/frontc/cparser.mly"
                                 ( fst _1 :: _2 )
# 5502 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1340 "src/frontc/cparser.mly"
                                        ( [] )
# 5508 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1341 "src/frontc/cparser.mly"
                                        ( fst _1 :: _2 )
# 5516 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1343 "src/frontc/cparser.mly"
                                        ( ("__asm__", 
					   [CONSTANT(CONST_STRING (fst _3))]) :: _5 )
# 5527 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'paren_attr_list) in
    Obj.repr(
# 1350 "src/frontc/cparser.mly"
                                        ( ("__attribute__", _3), _1 )
# 5536 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 1355 "src/frontc/cparser.mly"
                                        ( ("__declspec", _2), _1 )
# 5544 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1356 "src/frontc/cparser.mly"
                                        ( (fst _1, []), snd _1 )
# 5551 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1358 "src/frontc/cparser.mly"
                                        ( ("__thread",[]), _1 )
# 5558 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1362 "src/frontc/cparser.mly"
                                        ( ( "@cpf", [ CONSTANT(CONST_STRING (fst _1)) ] ), snd _1 )
# 5565 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    Obj.repr(
# 1366 "src/frontc/cparser.mly"
                   ( [])
# 5571 "src/frontc/cparser.ml"
               : 'attribute_nocv_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute_nocv) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attribute_nocv_list) in
    Obj.repr(
# 1367 "src/frontc/cparser.mly"
                                        ( fst _1 :: _2 )
# 5579 "src/frontc/cparser.ml"
               : 'attribute_nocv_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attribute_nocv) in
    Obj.repr(
# 1372 "src/frontc/cparser.mly"
                                        ( _1 )
# 5586 "src/frontc/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1373 "src/frontc/cparser.mly"
                                        ( ("const", []), _1 )
# 5593 "src/frontc/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1374 "src/frontc/cparser.mly"
                                        ( ("restrict",[]), _1 )
# 5600 "src/frontc/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1375 "src/frontc/cparser.mly"
                                        ( ("volatile",[]), _1 )
# 5607 "src/frontc/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'paren_attr_list) in
    Obj.repr(
# 1383 "src/frontc/cparser.mly"
                                        ( ("__attribute__", _3) )
# 5616 "src/frontc/cparser.ml"
               : 'just_attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 1384 "src/frontc/cparser.mly"
                                        ( ("__declspec", _2) )
# 5624 "src/frontc/cparser.ml"
               : 'just_attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'just_attribute) in
    Obj.repr(
# 1390 "src/frontc/cparser.mly"
                                        ( [_1] )
# 5631 "src/frontc/cparser.ml"
               : 'just_attributes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'just_attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'just_attributes) in
    Obj.repr(
# 1391 "src/frontc/cparser.mly"
                                        ( _1 :: _2 )
# 5639 "src/frontc/cparser.ml"
               : 'just_attributes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr) in
    Obj.repr(
# 1396 "src/frontc/cparser.mly"
                          ( PRAGMA (_2, _1) )
# 5647 "src/frontc/cparser.ml"
               : 'pragma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1397 "src/frontc/cparser.mly"
                                   ( PRAGMA (_2, _1) )
# 5656 "src/frontc/cparser.ml"
               : 'pragma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1398 "src/frontc/cparser.mly"
                                        ( PRAGMA (VARIABLE (fst _1), 
                                                  snd _1) )
# 5664 "src/frontc/cparser.ml"
               : 'pragma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1405 "src/frontc/cparser.mly"
             ( VARIABLE (fst _1) )
# 5671 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1407 "src/frontc/cparser.mly"
                  ( VARIABLE (fst _1) )
# 5678 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr) in
    Obj.repr(
# 1408 "src/frontc/cparser.mly"
                                        ( _2 )
# 5686 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1409 "src/frontc/cparser.mly"
                                         ( CALL(VARIABLE (fst _1), [VARIABLE (fst _2)]) )
# 5694 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1410 "src/frontc/cparser.mly"
                                         ( CONSTANT(CONST_INT (fst _1)) )
# 5701 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * cabsloc) in
    Obj.repr(
# 1411 "src/frontc/cparser.mly"
                                         ( CONSTANT(CONST_STRING (fst _1)) )
# 5708 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1415 "src/frontc/cparser.mly"
                                         ( VARIABLE "aconst" )
# 5715 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1417 "src/frontc/cparser.mly"
                                         ( VARIABLE (fst _1 ^ ":" ^ fst _3) )
# 5723 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1421 "src/frontc/cparser.mly"
                                         ( VARIABLE (fst _1 ^ ":" ^ fst _3) )
# 5731 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1423 "src/frontc/cparser.mly"
                                         ( VARIABLE ("default:" ^ fst _3) )
# 5739 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1428 "src/frontc/cparser.mly"
                                         ( VARIABLE ("__noreturn__") )
# 5746 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_attr) in
    Obj.repr(
# 1432 "src/frontc/cparser.mly"
                                         ( _1 )
# 5753 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1435 "src/frontc/cparser.mly"
                                     ( CALL(VARIABLE (fst _1), [VARIABLE ""]) )
# 5761 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 1436 "src/frontc/cparser.mly"
                                     ( CALL(VARIABLE (fst _1), _2) )
# 5769 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1438 "src/frontc/cparser.mly"
                                         (MEMBEROFPTR (_1, _3))
# 5777 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1439 "src/frontc/cparser.mly"
                                         (MEMBEROF (_1, _3))
# 5785 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'postfix_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'attr) in
    Obj.repr(
# 1440 "src/frontc/cparser.mly"
                                         (INDEX (_1, _3) )
# 5793 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'postfix_attr) in
    Obj.repr(
# 1447 "src/frontc/cparser.mly"
                                         ( _1 )
# 5800 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1448 "src/frontc/cparser.mly"
                                         (EXPR_SIZEOF (fst _2) )
# 5808 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 1450 "src/frontc/cparser.mly"
                           (let b, d = _3 in TYPE_SIZEOF (b, d))
# 5817 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1452 "src/frontc/cparser.mly"
                                         (EXPR_ALIGNOF (fst _2) )
# 5825 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 1453 "src/frontc/cparser.mly"
                                         (let b, d = _3 in TYPE_ALIGNOF (b, d))
# 5834 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1454 "src/frontc/cparser.mly"
                                        (UNARY (PLUS, _2))
# 5842 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1455 "src/frontc/cparser.mly"
                                        (UNARY (MINUS, _2))
# 5850 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1456 "src/frontc/cparser.mly"
                            (UNARY (MEMOF, _2))
# 5858 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1458 "src/frontc/cparser.mly"
                                 (UNARY (ADDROF, _2))
# 5866 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1459 "src/frontc/cparser.mly"
                                 (UNARY (NOT, _2))
# 5874 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1460 "src/frontc/cparser.mly"
                                        (UNARY (BNOT, _2))
# 5882 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_attr) in
    Obj.repr(
# 1464 "src/frontc/cparser.mly"
                                         ( _1 )
# 5889 "src/frontc/cparser.ml"
               : 'cast_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1468 "src/frontc/cparser.mly"
                                        ( _1 )
# 5896 "src/frontc/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1469 "src/frontc/cparser.mly"
                                        (BINARY(MUL ,_1 , _3))
# 5905 "src/frontc/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1470 "src/frontc/cparser.mly"
                                          (BINARY(DIV ,_1 , _3))
# 5913 "src/frontc/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1471 "src/frontc/cparser.mly"
                                          (BINARY(MOD ,_1 , _3))
# 5921 "src/frontc/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_attr) in
    Obj.repr(
# 1476 "src/frontc/cparser.mly"
                                        ( _1 )
# 5928 "src/frontc/cparser.ml"
               : 'additive_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_attr) in
    Obj.repr(
# 1477 "src/frontc/cparser.mly"
                                            (BINARY(ADD ,_1 , _3))
# 5937 "src/frontc/cparser.ml"
               : 'additive_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_attr) in
    Obj.repr(
# 1478 "src/frontc/cparser.mly"
                                            (BINARY(SUB ,_1 , _3))
# 5946 "src/frontc/cparser.ml"
               : 'additive_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'additive_attr) in
    Obj.repr(
# 1482 "src/frontc/cparser.mly"
                                        ( _1 )
# 5953 "src/frontc/cparser.ml"
               : 'shift_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_attr) in
    Obj.repr(
# 1483 "src/frontc/cparser.mly"
                                     (BINARY(SHL ,_1 , _3))
# 5961 "src/frontc/cparser.ml"
               : 'shift_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_attr) in
    Obj.repr(
# 1484 "src/frontc/cparser.mly"
                                     (BINARY(SHR ,_1 , _3))
# 5969 "src/frontc/cparser.ml"
               : 'shift_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1488 "src/frontc/cparser.mly"
                                        ( _1 )
# 5976 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1489 "src/frontc/cparser.mly"
                                   (BINARY(LT ,_1 , _3))
# 5984 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1490 "src/frontc/cparser.mly"
                                   (BINARY(GT ,_1 , _3))
# 5992 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1491 "src/frontc/cparser.mly"
                                      (BINARY(LE ,_1 , _3))
# 6000 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1492 "src/frontc/cparser.mly"
                                      (BINARY(GE ,_1 , _3))
# 6008 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'relational_attr) in
    Obj.repr(
# 1496 "src/frontc/cparser.mly"
                                        ( _1 )
# 6015 "src/frontc/cparser.ml"
               : 'equality_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_attr) in
    Obj.repr(
# 1497 "src/frontc/cparser.mly"
                                            (BINARY(EQ ,_1 , _3))
# 6023 "src/frontc/cparser.ml"
               : 'equality_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_attr) in
    Obj.repr(
# 1498 "src/frontc/cparser.mly"
                                            (BINARY(NE ,_1 , _3))
# 6031 "src/frontc/cparser.ml"
               : 'equality_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'equality_attr) in
    Obj.repr(
# 1503 "src/frontc/cparser.mly"
                                        ( _1 )
# 6038 "src/frontc/cparser.ml"
               : 'bitwise_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_and_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equality_attr) in
    Obj.repr(
# 1504 "src/frontc/cparser.mly"
                                       (BINARY(BAND ,_1 , _3))
# 6047 "src/frontc/cparser.ml"
               : 'bitwise_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_attr) in
    Obj.repr(
# 1508 "src/frontc/cparser.mly"
                                           ( _1 )
# 6054 "src/frontc/cparser.ml"
               : 'bitwise_xor_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_xor_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_attr) in
    Obj.repr(
# 1509 "src/frontc/cparser.mly"
                                           (BINARY(XOR ,_1 , _3))
# 6062 "src/frontc/cparser.ml"
               : 'bitwise_xor_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_attr) in
    Obj.repr(
# 1513 "src/frontc/cparser.mly"
                                          ( _1 )
# 6069 "src/frontc/cparser.ml"
               : 'bitwise_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_or_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_attr) in
    Obj.repr(
# 1514 "src/frontc/cparser.mly"
                                          (BINARY(BOR ,_1 , _3))
# 6077 "src/frontc/cparser.ml"
               : 'bitwise_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_attr) in
    Obj.repr(
# 1518 "src/frontc/cparser.mly"
                                                ( _1 )
# 6084 "src/frontc/cparser.ml"
               : 'logical_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_and_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_attr) in
    Obj.repr(
# 1519 "src/frontc/cparser.mly"
                                             (BINARY(AND ,_1 , _3))
# 6093 "src/frontc/cparser.ml"
               : 'logical_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_attr) in
    Obj.repr(
# 1523 "src/frontc/cparser.mly"
                                               ( _1 )
# 6100 "src/frontc/cparser.ml"
               : 'logical_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_or_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_attr) in
    Obj.repr(
# 1524 "src/frontc/cparser.mly"
                                               (BINARY(OR ,_1 , _3))
# 6108 "src/frontc/cparser.ml"
               : 'logical_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_or_attr) in
    Obj.repr(
# 1528 "src/frontc/cparser.mly"
                                           ( _1 )
# 6115 "src/frontc/cparser.ml"
               : 'conditional_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'logical_or_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'conditional_attr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_attr) in
    Obj.repr(
# 1531 "src/frontc/cparser.mly"
                                          ( QUESTION(_1, _3, _5) )
# 6124 "src/frontc/cparser.ml"
               : 'conditional_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_attr) in
    Obj.repr(
# 1534 "src/frontc/cparser.mly"
                                          ( _1 )
# 6131 "src/frontc/cparser.ml"
               : 'attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attr) in
    Obj.repr(
# 1538 "src/frontc/cparser.mly"
                                         ( [_1] )
# 6138 "src/frontc/cparser.ml"
               : 'attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attr_list_ne) in
    Obj.repr(
# 1539 "src/frontc/cparser.mly"
                                         ( _1 :: _3 )
# 6146 "src/frontc/cparser.ml"
               : 'attr_list_ne))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attr_list_ne) in
    Obj.repr(
# 1540 "src/frontc/cparser.mly"
                                         ( _3 )
# 6153 "src/frontc/cparser.ml"
               : 'attr_list_ne))
; (fun __caml_parser_env ->
    Obj.repr(
# 1543 "src/frontc/cparser.mly"
                                         ( [] )
# 6159 "src/frontc/cparser.ml"
               : 'attr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attr_list_ne) in
    Obj.repr(
# 1544 "src/frontc/cparser.mly"
                                         ( _1 )
# 6166 "src/frontc/cparser.ml"
               : 'attr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr_list_ne) in
    Obj.repr(
# 1547 "src/frontc/cparser.mly"
                                         ( _2 )
# 6174 "src/frontc/cparser.ml"
               : 'paren_attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    Obj.repr(
# 1548 "src/frontc/cparser.mly"
                                         ( [] )
# 6181 "src/frontc/cparser.ml"
               : 'paren_attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr_list) in
    Obj.repr(
# 1551 "src/frontc/cparser.mly"
                                         ( _2 )
# 6189 "src/frontc/cparser.ml"
               : 'paren_attr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    Obj.repr(
# 1552 "src/frontc/cparser.mly"
                                         ( [] )
# 6196 "src/frontc/cparser.ml"
               : 'paren_attr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1555 "src/frontc/cparser.mly"
                                         ( [] )
# 6202 "src/frontc/cparser.ml"
               : 'opt_paren_attr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list) in
    Obj.repr(
# 1556 "src/frontc/cparser.mly"
                                         ( _1 )
# 6209 "src/frontc/cparser.ml"
               : 'opt_paren_attr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1560 "src/frontc/cparser.mly"
                                        ( [] )
# 6215 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1561 "src/frontc/cparser.mly"
                                        ( ("volatile", []) :: _2 )
# 6223 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1562 "src/frontc/cparser.mly"
                                        ( ("const", []) :: _2 )
# 6231 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'one_string_constant) in
    Obj.repr(
# 1565 "src/frontc/cparser.mly"
                                                 ( [_1] )
# 6238 "src/frontc/cparser.ml"
               : 'asmtemplate))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'one_string_constant) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'asmtemplate) in
    Obj.repr(
# 1566 "src/frontc/cparser.mly"
                                                 ( _1 :: _2 )
# 6246 "src/frontc/cparser.ml"
               : 'asmtemplate))
; (fun __caml_parser_env ->
    Obj.repr(
# 1569 "src/frontc/cparser.mly"
                        ( None )
# 6252 "src/frontc/cparser.ml"
               : 'asmoutputs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'asmoperands) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asminputs) in
    Obj.repr(
# 1571 "src/frontc/cparser.mly"
                        ( let (ins, clobs) = _3 in
                          Some {aoutputs = _2; ainputs = ins; aclobbers = clobs} )
# 6261 "src/frontc/cparser.ml"
               : 'asmoutputs))
; (fun __caml_parser_env ->
    Obj.repr(
# 1575 "src/frontc/cparser.mly"
                                        ( [] )
# 6267 "src/frontc/cparser.ml"
               : 'asmoperands))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'asmoperandsne) in
    Obj.repr(
# 1576 "src/frontc/cparser.mly"
                                        ( List.rev _1 )
# 6274 "src/frontc/cparser.ml"
               : 'asmoperands))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'asmoperand) in
    Obj.repr(
# 1579 "src/frontc/cparser.mly"
                                        ( [_1] )
# 6281 "src/frontc/cparser.ml"
               : 'asmoperandsne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'asmoperandsne) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asmoperand) in
    Obj.repr(
# 1580 "src/frontc/cparser.mly"
                                        ( _3 :: _1 )
# 6289 "src/frontc/cparser.ml"
               : 'asmoperandsne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'asmopname) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    Obj.repr(
# 1583 "src/frontc/cparser.mly"
                                                           ( (_1, fst _2, fst _4) )
# 6299 "src/frontc/cparser.ml"
               : 'asmoperand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'asmopname) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    Obj.repr(
# 1584 "src/frontc/cparser.mly"
                                                           ( (_1, fst _2, NOTHING ) )
# 6308 "src/frontc/cparser.ml"
               : 'asmoperand))
; (fun __caml_parser_env ->
    Obj.repr(
# 1587 "src/frontc/cparser.mly"
                             ( ([], []) )
# 6314 "src/frontc/cparser.ml"
               : 'asminputs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'asmoperands) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asmclobber) in
    Obj.repr(
# 1589 "src/frontc/cparser.mly"
                        ( (_2, _3) )
# 6322 "src/frontc/cparser.ml"
               : 'asminputs))
; (fun __caml_parser_env ->
    Obj.repr(
# 1592 "src/frontc/cparser.mly"
                                        ( None )
# 6328 "src/frontc/cparser.ml"
               : 'asmopname))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    Obj.repr(
# 1593 "src/frontc/cparser.mly"
                                        ( Some (fst _2) )
# 6335 "src/frontc/cparser.ml"
               : 'asmopname))
; (fun __caml_parser_env ->
    Obj.repr(
# 1597 "src/frontc/cparser.mly"
                                        ( [] )
# 6341 "src/frontc/cparser.ml"
               : 'asmclobber))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'asmcloberlst_ne) in
    Obj.repr(
# 1598 "src/frontc/cparser.mly"
                                        ( _2 )
# 6348 "src/frontc/cparser.ml"
               : 'asmclobber))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'one_string_constant) in
    Obj.repr(
# 1601 "src/frontc/cparser.mly"
                                                 ( [_1] )
# 6355 "src/frontc/cparser.ml"
               : 'asmcloberlst_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'one_string_constant) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asmcloberlst_ne) in
    Obj.repr(
# 1602 "src/frontc/cparser.mly"
                                                 ( _1 :: _3 )
# 6363 "src/frontc/cparser.ml"
               : 'asmcloberlst_ne))
(* Entry interpret *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry file *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let interpret (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Cabs.definition list)
let file (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Cabs.definition list)
;;
# 1606 "src/frontc/cparser.mly"



# 6396 "src/frontc/cparser.ml"
